
GO
PRINT N'Creando [ADM]...';


GO
CREATE SCHEMA [ADM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creando [Lic]...';


GO
CREATE SCHEMA [Lic]
    AUTHORIZATION [dbo];


GO
PRINT N'Creando [ADM].[C_MODULO]...';


GO
CREATE TABLE [ADM].[C_MODULO] (
    [ID_MODULO]               UNIQUEIDENTIFIER NOT NULL,
    [CL_MODULO]               NVARCHAR (10)    NOT NULL,
    [NB_MODULO]               NVARCHAR (200)   NOT NULL,
    [DS_MODULO]               NVARCHAR (500)   NULL,
    [ID_SISTEMA]              UNIQUEIDENTIFIER NOT NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_C_MODULO] PRIMARY KEY CLUSTERED ([ID_MODULO] ASC)
);


GO
PRINT N'Creando [ADM].[C_USUARIO]...';


GO
CREATE TABLE [ADM].[C_USUARIO] (
    [CL_USUARIO]              NVARCHAR (50)  NOT NULL,
    [NB_USUARIO]              NVARCHAR (300) NOT NULL,
    [NB_CORREO_ELECTRONICO]   NVARCHAR (300) NOT NULL,
    [NB_PASSWORD]             NVARCHAR (100) NOT NULL,
    [FE_CAMBIAR_PASSWORD]     DATETIME       NULL,
    [CL_CAMBIAR_PASSWORD]     NVARCHAR (100) NULL,
    [FG_CAMBIAR_PASSWORD]     BIT            NOT NULL,
    [XML_PERSONALIZACION]     XML            NULL,
    [ID_ROL]                  INT            NOT NULL,
    [ID_EMPLEADO]             INT            NULL,
    [FG_ACTIVO]               BIT            NOT NULL,
    [FE_INACTIVO]             DATETIME       NULL,
    [CL_TIPO_MULTIEMPRESA]    NVARCHAR (20)  NOT NULL,
    [FE_CREACION]             DATETIME       NOT NULL,
    [FE_MODIFICACION]         DATETIME       NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)  NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)  NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)  NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)  NULL,
    CONSTRAINT [PK__C_USUARI__70851B1EF9507A51] PRIMARY KEY CLUSTERED ([CL_USUARIO] ASC),
    CONSTRAINT [UC_NB_CORREO_ELECTRONICO] UNIQUE NONCLUSTERED ([NB_CORREO_ELECTRONICO] ASC)
);


GO
PRINT N'Creando [ADM].[C_VERSION]...';


GO
CREATE TABLE [ADM].[C_VERSION] (
    [ID_VERSION]              UNIQUEIDENTIFIER NOT NULL,
    [ID_MODULO]               UNIQUEIDENTIFIER NOT NULL,
    [NO_RELEASE]              DECIMAL (13, 2)  NOT NULL,
    [DS_VERSION]              NVARCHAR (500)   NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_C_VERSION] PRIMARY KEY CLUSTERED ([ID_VERSION] ASC)
);


GO
PRINT N'Creando [ADM].[C_ROL]...';


GO
CREATE TABLE [ADM].[C_ROL] (
    [ID_ROL]                  INT            IDENTITY (1, 1) NOT NULL,
    [CL_ROL]                  NVARCHAR (30)  NOT NULL,
    [NB_ROL]                  NVARCHAR (100) NOT NULL,
    [XML_AUTORIZACION]        XML            NULL,
    [FG_ACTIVO]               BIT            NOT NULL,
    [FE_INACTIVO]             DATETIME       NULL,
    [FE_CREACION]             DATETIME       NOT NULL,
    [FE_MODIFICACION]         DATETIME       NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)  NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)  NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)  NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)  NULL,
    CONSTRAINT [PK_C_ROL] PRIMARY KEY CLUSTERED ([ID_ROL] ASC),
    CONSTRAINT [UC_CL_ROL] UNIQUE NONCLUSTERED ([CL_ROL] ASC),
    CONSTRAINT [UC_NB_ROL] UNIQUE NONCLUSTERED ([NB_ROL] ASC)
);


GO
PRINT N'Creando [ADM].[S_FUNCION]...';


GO
CREATE TABLE [ADM].[S_FUNCION] (
    [ID_FUNCION]        INT            NOT NULL,
    [CL_FUNCION]        NVARCHAR (30)  NOT NULL,
    [CL_TIPO_FUNCION]   NVARCHAR (100) NOT NULL,
    [NB_FUNCION]        NVARCHAR (100) NOT NULL,
    [ID_FUNCION_PADRE]  INT            NULL,
    [NB_URL]            NVARCHAR (500) NULL,
    [XML_CONFIGURACION] XML            NULL,
    [NO_ORDEN]          TINYINT        NOT NULL,
    CONSTRAINT [PK_S_FUNCION] PRIMARY KEY CLUSTERED ([ID_FUNCION] ASC)
);


GO
PRINT N'Creando [ADM].[C_EMPRESA]...';


GO
CREATE TABLE [ADM].[C_EMPRESA] (
    [ID_EMPRESA]              UNIQUEIDENTIFIER NOT NULL,
    [CL_EMPRESA]              NVARCHAR (10)    NOT NULL,
    [NB_EMPRESA]              NVARCHAR (200)   NOT NULL,
    [DS_EMPRESA]              NVARCHAR (500)   NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_C_EMPRESA] PRIMARY KEY CLUSTERED ([ID_EMPRESA] ASC)
);


GO
PRINT N'Creando [ADM].[C_ROL_FUNCION]...';


GO
CREATE TABLE [ADM].[C_ROL_FUNCION] (
    [ID_ROL]     INT NOT NULL,
    [ID_FUNCION] INT NOT NULL
);


GO
PRINT N'Creando [ADM].[S_CATALOGO_TIPO]...';


GO
CREATE TABLE [ADM].[S_CATALOGO_TIPO] (
    [ID_CATALOGO_TIPO] INT             IDENTITY (1, 1) NOT NULL,
    [NB_CATALOGO_TIPO] NVARCHAR (100)  NOT NULL,
    [DS_CATALOGO_TIPO] NVARCHAR (1000) NULL,
    CONSTRAINT [PK_S_CATALOGO_TIPO] PRIMARY KEY CLUSTERED ([ID_CATALOGO_TIPO] ASC)
);


GO
PRINT N'Creando [ADM].[C_LICENCIA]...';


GO
CREATE TABLE [ADM].[C_LICENCIA] (
    [ID_LICENCIA]             UNIQUEIDENTIFIER NOT NULL,
    [CL_LICENCIA]             NVARCHAR (10)    NOT NULL,
    [NB_LICENCIA]             NVARCHAR (200)   NOT NULL,
    [FG_PERIODO]              BIT              NOT NULL,
    [FG_VOLUMEN]              BIT              NOT NULL,
    [DS_LICENCIA]             NVARCHAR (500)   NOT NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_C_LICENCIA] PRIMARY KEY CLUSTERED ([ID_LICENCIA] ASC)
);


GO
PRINT N'Creando [ADM].[S_CONFIGURACION]...';


GO
CREATE TABLE [ADM].[S_CONFIGURACION] (
    [XML_CONFIGURACION]    XML           NOT NULL,
    [FE_MODIFICACION]      DATETIME      NULL,
    [CL_USUARIO_MODIFICA]  NVARCHAR (50) NULL,
    [NB_PROGRAMA_MODIFICA] NVARCHAR (50) NULL
);


GO
PRINT N'Creando [ADM].[K_ARCHIVO]...';


GO
CREATE TABLE [ADM].[K_ARCHIVO] (
    [ID_ARCHIVO]              INT              IDENTITY (1, 1) NOT NULL,
    [NB_ARCHIVO]              NVARCHAR (512)   NOT NULL,
    [FI_ARCHIVO]              VARBINARY (MAX)  NOT NULL,
    [ID_ITEM]                 UNIQUEIDENTIFIER NULL,
    [FE_CREACION]             DATETIME         NOT NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL
);


GO
PRINT N'Creando [ADM].[C_CATALOGO_LISTA]...';


GO
CREATE TABLE [ADM].[C_CATALOGO_LISTA] (
    [ID_CATALOGO_LISTA]       INT             IDENTITY (1, 1) NOT NULL,
    [NB_CATALOGO_LISTA]       NVARCHAR (100)  NOT NULL,
    [DS_CATALOGO_LISTA]       NVARCHAR (1000) NULL,
    [ID_CATALOGO_TIPO]        INT             NOT NULL,
    [FG_SISTEMA]              BIT             NULL,
    [FE_CREACION]             DATETIME        NOT NULL,
    [FE_MODIFICACION]         DATETIME        NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)   NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)   NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)   NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)   NULL,
    CONSTRAINT [PK_C_CATALOGO_LISTA] PRIMARY KEY CLUSTERED ([ID_CATALOGO_LISTA] ASC)
);


GO
PRINT N'Creando [ADM].[C_CATALOGO_VALOR]...';


GO
CREATE TABLE [ADM].[C_CATALOGO_VALOR] (
    [ID_CATALOGO_VALOR]       INT             IDENTITY (1, 1) NOT NULL,
    [CL_CATALOGO_VALOR]       NVARCHAR (20)   NOT NULL,
    [NB_CATALOGO_VALOR]       NVARCHAR (100)  NOT NULL,
    [DS_CATALOGO_VALOR]       NVARCHAR (1000) NULL,
    [ID_CATALOGO_LISTA]       INT             NOT NULL,
    [FE_CREACION]             DATETIME        NOT NULL,
    [FE_MODIFICACION]         DATETIME        NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)   NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)   NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)   NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)   NULL,
    CONSTRAINT [PK_C_CATALOGO_VALOR] PRIMARY KEY CLUSTERED ([ID_CATALOGO_VALOR] ASC)
);


GO
PRINT N'Creando [ADM].[K_ERROR]...';


GO
CREATE TABLE [ADM].[K_ERROR] (
    [ID_ERROR]            UNIQUEIDENTIFIER NOT NULL,
    [CL_CLAVE]            INT              NOT NULL,
    [DS_ERROR]            NVARCHAR (250)   NOT NULL,
    [FE_CREACION]         DATETIME         NOT NULL,
    [CL_USUARIO_APP_CREA] NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_CREA]    NVARCHAR (50)    NOT NULL,
    CONSTRAINT [PK_K_ERROR] PRIMARY KEY CLUSTERED ([ID_ERROR] ASC)
);


GO
PRINT N'Creando [ADM].[C_CLIENTE]...';


GO
CREATE TABLE [ADM].[C_CLIENTE] (
    [ID_CLIENTE]              UNIQUEIDENTIFIER NOT NULL,
    [CL_CLIENTE]              NVARCHAR (10)    NOT NULL,
    [NB_CLIENTE]              NVARCHAR (200)   NOT NULL,
    [NB_CONTACTO]             NVARCHAR (200)   NOT NULL,
    [CL_EMAIL]                NVARCHAR (100)   NULL,
    [XML_TELEFONOS]           XML              NULL,
    [NB_EJECUTIVO_CUENTA]     NVARCHAR (200)   NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    [CL_PASSWORD]             NVARCHAR (100)   NULL,
    CONSTRAINT [PK_C_CLIENTE] PRIMARY KEY CLUSTERED ([ID_CLIENTE] ASC)
);


GO
PRINT N'Creando [ADM].[C_SISTEMA]...';


GO
CREATE TABLE [ADM].[C_SISTEMA] (
    [ID_SISTEMA]              UNIQUEIDENTIFIER NOT NULL,
    [CL_SISTEMA]              NVARCHAR (10)    NOT NULL,
    [NB_SISTEMA]              NVARCHAR (200)   NOT NULL,
    [CL_TIPO]                 NVARCHAR (200)   NOT NULL,
    [DS_SISTEMA]              NVARCHAR (500)   NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_C_SISTEMA] PRIMARY KEY CLUSTERED ([ID_SISTEMA] ASC)
);


GO
PRINT N'Creando [Lic].[K_GESTION_PERIODO]...';


GO
CREATE TABLE [Lic].[K_GESTION_PERIODO] (
    [ID_GESTION_PERIODO]      UNIQUEIDENTIFIER NOT NULL,
    [ID_CLIENTE]              UNIQUEIDENTIFIER NOT NULL,
    [ID_SISTEMA]              UNIQUEIDENTIFIER NOT NULL,
    [ID_EMPRESA]              UNIQUEIDENTIFIER NOT NULL,
    [ID_MODULO]               UNIQUEIDENTIFIER NOT NULL,
    [ID_VERSION]              UNIQUEIDENTIFIER NOT NULL,
    [ID_LICENCIA]             UNIQUEIDENTIFIER NOT NULL,
    [FE_INICIO]               DATETIME         NULL,
    [FE_FIN]                  DATETIME         NULL,
    [NO_VOLUMEN]              INT              NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_K_GESTION_PERIODO] PRIMARY KEY CLUSTERED ([ID_GESTION_PERIODO] ASC)
);


GO
PRINT N'Creando [Lic].[K_EMPRESA_CLIENTE]...';


GO
CREATE TABLE [Lic].[K_EMPRESA_CLIENTE] (
    [ID_EMPRESA_CLIENTE]      UNIQUEIDENTIFIER NOT NULL,
    [ID_CLIENTE]              UNIQUEIDENTIFIER NOT NULL,
    [ID_EMPRESA]              UNIQUEIDENTIFIER NOT NULL,
    [CL_USUARIO_APP_CREA]     NVARCHAR (50)    NOT NULL,
    [CL_USUARIO_APP_MODIFICA] NVARCHAR (50)    NULL,
    [NB_PROGRAMA_CREA]        NVARCHAR (50)    NOT NULL,
    [NB_PROGRAMA_MODIFICA]    NVARCHAR (50)    NULL,
    [FE_CREACION]             DATETIME         NULL,
    [FE_MODIFICACION]         DATETIME         NULL,
    CONSTRAINT [PK_K_EMPRESA_CLIENTE] PRIMARY KEY CLUSTERED ([ID_EMPRESA_CLIENTE] ASC)
);


GO
PRINT N'Creando [ADM].[DF_C_USUARIO_CL_TIPO_MULTIEMPRESA]...';


GO
ALTER TABLE [ADM].[C_USUARIO]
    ADD CONSTRAINT [DF_C_USUARIO_CL_TIPO_MULTIEMPRESA] DEFAULT (N'CORPORATIVO') FOR [CL_TIPO_MULTIEMPRESA];


GO
PRINT N'Creando [ADM].[DF_C_ROL_FG_ACTIVO]...';


GO
ALTER TABLE [ADM].[C_ROL]
    ADD CONSTRAINT [DF_C_ROL_FG_ACTIVO] DEFAULT ((1)) FOR [FG_ACTIVO];


GO
PRINT N'Creando [ADM].[DF_S_FUNCION_NO_ORDEN]...';


GO
ALTER TABLE [ADM].[S_FUNCION]
    ADD CONSTRAINT [DF_S_FUNCION_NO_ORDEN] DEFAULT ((0)) FOR [NO_ORDEN];


GO
PRINT N'Creando [ADM].[DF_C_CATALOGO_LISTA_FG_SISTEMA]...';


GO
ALTER TABLE [ADM].[C_CATALOGO_LISTA]
    ADD CONSTRAINT [DF_C_CATALOGO_LISTA_FG_SISTEMA] DEFAULT ((0)) FOR [FG_SISTEMA];


GO
PRINT N'Creando [ADM].[FK_C_MODULO_C_SISTEMA]...';


GO
ALTER TABLE [ADM].[C_MODULO] WITH NOCHECK
    ADD CONSTRAINT [FK_C_MODULO_C_SISTEMA] FOREIGN KEY ([ID_SISTEMA]) REFERENCES [ADM].[C_SISTEMA] ([ID_SISTEMA]);


GO
PRINT N'Creando [ADM].[FK_C_VERSION_C_MODULO]...';


GO
ALTER TABLE [ADM].[C_VERSION] WITH NOCHECK
    ADD CONSTRAINT [FK_C_VERSION_C_MODULO] FOREIGN KEY ([ID_MODULO]) REFERENCES [ADM].[C_MODULO] ([ID_MODULO]);


GO
PRINT N'Creando [ADM].[FK_C_ROL_FUNCION_C_ROL]...';


GO
ALTER TABLE [ADM].[C_ROL_FUNCION] WITH NOCHECK
    ADD CONSTRAINT [FK_C_ROL_FUNCION_C_ROL] FOREIGN KEY ([ID_ROL]) REFERENCES [ADM].[C_ROL] ([ID_ROL]);


GO
PRINT N'Creando [ADM].[FK_C_ROL_FUNCION_S_FUNCION]...';


GO
ALTER TABLE [ADM].[C_ROL_FUNCION] WITH NOCHECK
    ADD CONSTRAINT [FK_C_ROL_FUNCION_S_FUNCION] FOREIGN KEY ([ID_FUNCION]) REFERENCES [ADM].[S_FUNCION] ([ID_FUNCION]);


GO
PRINT N'Creando [ADM].[FK_C_CATALOGO_LISTA_S_CATALOGO_TIPO]...';


GO
ALTER TABLE [ADM].[C_CATALOGO_LISTA] WITH NOCHECK
    ADD CONSTRAINT [FK_C_CATALOGO_LISTA_S_CATALOGO_TIPO] FOREIGN KEY ([ID_CATALOGO_TIPO]) REFERENCES [ADM].[S_CATALOGO_TIPO] ([ID_CATALOGO_TIPO]);


GO
PRINT N'Creando [ADM].[FK_C_CATALOGO_VALOR_C_CATALOGO_LISTA]...';


GO
ALTER TABLE [ADM].[C_CATALOGO_VALOR] WITH NOCHECK
    ADD CONSTRAINT [FK_C_CATALOGO_VALOR_C_CATALOGO_LISTA] FOREIGN KEY ([ID_CATALOGO_LISTA]) REFERENCES [ADM].[C_CATALOGO_LISTA] ([ID_CATALOGO_LISTA]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_CLIENTE]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_CLIENTE] FOREIGN KEY ([ID_CLIENTE]) REFERENCES [ADM].[C_CLIENTE] ([ID_CLIENTE]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_EMPRESA]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_EMPRESA] FOREIGN KEY ([ID_EMPRESA]) REFERENCES [ADM].[C_EMPRESA] ([ID_EMPRESA]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_LICENCIA]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_LICENCIA] FOREIGN KEY ([ID_LICENCIA]) REFERENCES [ADM].[C_LICENCIA] ([ID_LICENCIA]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_MODULO]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_MODULO] FOREIGN KEY ([ID_MODULO]) REFERENCES [ADM].[C_MODULO] ([ID_MODULO]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_SISTEMA]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_SISTEMA] FOREIGN KEY ([ID_SISTEMA]) REFERENCES [ADM].[C_SISTEMA] ([ID_SISTEMA]);


GO
PRINT N'Creando [Lic].[FK_K_GESTION_PERIODO_C_VERSION]...';


GO
ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH NOCHECK
    ADD CONSTRAINT [FK_K_GESTION_PERIODO_C_VERSION] FOREIGN KEY ([ID_VERSION]) REFERENCES [ADM].[C_VERSION] ([ID_VERSION]);


GO
PRINT N'Creando [Lic].[FK_K_EMPRESA_CLIENTE_C_CLIENTE]...';


GO
ALTER TABLE [Lic].[K_EMPRESA_CLIENTE] WITH NOCHECK
    ADD CONSTRAINT [FK_K_EMPRESA_CLIENTE_C_CLIENTE] FOREIGN KEY ([ID_CLIENTE]) REFERENCES [ADM].[C_CLIENTE] ([ID_CLIENTE]);


GO
PRINT N'Creando [Lic].[FK_K_EMPRESA_CLIENTE_C_EMPRESA]...';


GO
ALTER TABLE [Lic].[K_EMPRESA_CLIENTE] WITH NOCHECK
    ADD CONSTRAINT [FK_K_EMPRESA_CLIENTE_C_EMPRESA] FOREIGN KEY ([ID_EMPRESA]) REFERENCES [ADM].[C_EMPRESA] ([ID_EMPRESA]);


GO
PRINT N'Creando [dbo].[F_ERROR_CREAR_ENCABEZADO]...';


GO
-- =============================================
-- Author:		Julio Díaz
-- Create date: 20/11/2015
-- Description:	Función para crear el encabezado del mensaje de error
-- =============================================
CREATE FUNCTION [dbo].[F_ERROR_CREAR_ENCABEZADO]
(
	-- Add the parameters for the function here
	@PIN_NO_REGISTROS_AFECTADOS INT
	,@PIN_NO_ERROR INT
	,@PIN_CL_TIPO_ERROR NVARCHAR(10)
)
RETURNS XML
AS
BEGIN

	DECLARE @XML_RESULTADO XML
	SET @XML_RESULTADO = (
		SELECT @PIN_NO_REGISTROS_AFECTADOS AS "@NO_AFECTADOS" 
			, @PIN_NO_ERROR AS "@NO_ERROR"
			, @PIN_CL_TIPO_ERROR AS "@CL_TIPO_ERROR"
		FOR XML PATH ('RESULT')
	)

	RETURN @XML_RESULTADO

END
GO
PRINT N'Creando [dbo].[F_ERROR_INSERTAR_MENSAJES]...';


GO
-- =============================================
-- Author:		Julio Díaz
-- Create date: 20/11/2015
-- Description:	Función para crear el encabezado del mensaje de error
-- =============================================
CREATE FUNCTION [dbo].[F_ERROR_INSERTAR_MENSAJES]
(
	-- Add the parameters for the function here
	@PIN_XML_ENCABEZADO XML
	,@PIN_DS_MENSAJE NVARCHAR(500)
	,@PIN_CL_IDIOMA NVARCHAR(20)
)
RETURNS XML
AS
BEGIN

	DECLARE @XML_RESULTADO XML
	SET @XML_RESULTADO = (
		SELECT @PIN_CL_IDIOMA AS "@CL_IDIOMA" 
			, @PIN_DS_MENSAJE AS "@DS_MENSAJE"
		FOR XML PATH ('MENSAJE')
	)

	IF @PIN_XML_ENCABEZADO.exist('/RESULT/MENSAJES') <> 1
		SET @PIN_XML_ENCABEZADO.modify('insert <MENSAJES /> into (/RESULT)[1]');

	SET @PIN_XML_ENCABEZADO.modify('insert sql:variable("@XML_RESULTADO") into (/RESULT/MENSAJES)[1]') ;

	SET @XML_RESULTADO = @PIN_XML_ENCABEZADO

	RETURN @XML_RESULTADO

END
GO
PRINT N'Creando [dbo].[F_ERROR_MENSAJES]...';


GO
-- =============================================
-- Author:		Julio Díaz
-- Create date: 25/11/2015
-- Description:	Función para crear los mensajes comunes de error
-- =============================================
CREATE FUNCTION [dbo].[F_ERROR_MENSAJES]
(
	@PIN_NO_ERROR INT
	,@PIN_ERROR_MENSAJE NVARCHAR(250)
)
RETURNS XML
AS
BEGIN
	DECLARE @XML_RESULTADO XML
		-- EL XML DEVUELVE EL ERROR INDICADO POR SQL Y UN MSJ DE ERROR GENÉRICO

	IF @PIN_NO_ERROR = 2627 BEGIN
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @PIN_NO_ERROR, 'WARNING')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Este campo ya se encuentra en uso. ' + @PIN_ERROR_MENSAJE, 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Este campo ya se encuentra en uso. ' + @PIN_ERROR_MENSAJE, 'EN')
	END ELSE IF @PIN_NO_ERROR = 547 BEGIN
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @PIN_NO_ERROR, 'WARNING')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'No se puede eliminar porque tiene datos relacionados. ' + @PIN_ERROR_MENSAJE, 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'No se puede eliminar porque tiene datos relacionados. ' + @PIN_ERROR_MENSAJE, 'EN')
	END ELSE BEGIN
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @PIN_NO_ERROR, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, @PIN_ERROR_MENSAJE, 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, @PIN_ERROR_MENSAJE, 'EN')
	END

	RETURN @XML_RESULTADO

END
GO
PRINT N'Creando [dbo].[F_GETDATE]...';


GO
-- =============================================
-- Author:		Julio Díaz
-- Create date: 12/02/2016
-- Description:	Función sacar la fecha según la configuración del horario
-- =============================================
CREATE FUNCTION [dbo].[F_GETDATE] ()
RETURNS DATETIME
AS
BEGIN
	DECLARE @FE_SISTEMA AS DATETIME = GETDATE()
	RETURN @FE_SISTEMA
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_CLIENTE]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 22/12/2017
-- Description: Elimina un registro de C_CLIENTE
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_CLIENTE]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_CLIENTE AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		DELETE FROM ADM.C_CLIENTE
		WHERE [ID_CLIENTE] = @PIN_ID_CLIENTE
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_EMPRESA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 22/12/2017
-- Description: Elimina un registro de C_EMPRESA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_EMPRESA]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_EMPRESA AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		
		DELETE FROM ADM.C_EMPRESA
		WHERE [ID_EMPRESA] = @PIN_ID_EMPRESA
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_LICENCIA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Elimina un registro de C_LICENCIA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_LICENCIA]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_LICENCIA AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		DELETE FROM ADM.C_LICENCIA
		WHERE [ID_LICENCIA] = @PIN_ID_LICENCIA
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_MODULO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Elimina un registro de C_MODULO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_MODULO]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_MODULO AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		DELETE FROM ADM.C_MODULO
		WHERE [ID_MODULO] = @PIN_ID_MODULO
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_SISTEMA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 26/12/2017
-- Description: Elimina un registro de C_SISTEMA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_SISTEMA]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_SISTEMA AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		DELETE FROM ADM.C_SISTEMA
		WHERE [ID_SISTEMA] = @PIN_ID_SISTEMA
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_VERSION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Elimina un registro de C_VERSION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_VERSION]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_VERSION AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		DELETE FROM ADM.C_VERSION
		WHERE [ID_VERSION] = @PIN_ID_VERSION
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_EMPRESA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Inserta un nuevo C_EMPRESA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_EMPRESA] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_EMPRESA as uniqueidentifier,
		@PIN_CL_EMPRESA nvarchar (10),
		@PIN_NB_EMPRESA nvarchar (200),
		@PIN_DS_EMPRESA nvarchar (500),
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO ADM.C_EMPRESA(
						ID_EMPRESA,
						CL_EMPRESA,
						NB_EMPRESA,
						DS_EMPRESA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						 @PIN_CL_EMPRESA,
						 @PIN_NB_EMPRESA,
						 @PIN_DS_EMPRESA,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )			
		END ELSE BEGIN
			UPDATE ADM.C_EMPRESA SET
						CL_EMPRESA=@PIN_CL_EMPRESA,
						NB_EMPRESA=@PIN_NB_EMPRESA,
						DS_EMPRESA=@PIN_DS_EMPRESA,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_EMPRESA = @PIN_ID_EMPRESA
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_CLIENTE]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 22/12/2017
-- Description: Inserta un nuevo C_CLIENTE
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_CLIENTE] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_CLIENTE as uniqueidentifier,
		@PIN_CL_CLIENTE nvarchar (10),
		@PIN_CL_PASSWORD nvarchar (100),
		@PIN_NB_CLIENTE nvarchar (200),
		@PIN_NB_CONTACTO nvarchar (200),
		@PIN_CL_EMAIL nvarchar(100),
		@PIN_XML_TELEFONOS as xml, 
		@PIN_XML_EMPRESAS as xml, 
		@PIN_NB_EJECUTIVO_CUENTA nvarchar (200),
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
					SET @PIN_ID_CLIENTE= NEWID();

			INSERT INTO ADM.C_CLIENTE(
						ID_CLIENTE,
						CL_CLIENTE,
						CL_PASSWORD,
						NB_CLIENTE,
						NB_CONTACTO,
						CL_EMAIL,
						XML_TELEFONOS,
						NB_EJECUTIVO_CUENTA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( @PIN_ID_CLIENTE,
						 @PIN_CL_CLIENTE,
						 @PIN_CL_PASSWORD,
						 @PIN_NB_CLIENTE,
						 @PIN_NB_CONTACTO,
						 @PIN_CL_EMAIL,
						 @PIN_XML_TELEFONOS,
						 @PIN_NB_EJECUTIVO_CUENTA,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )

						 
		INSERT INTO Lic.K_EMPRESA_CLIENTE(
						ID_EMPRESA_CLIENTE,
						ID_CLIENTE,
						ID_EMPRESA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)

				select   NEWID() AS ID_EMPRESA_CLIENTE,
						 @PIN_ID_CLIENTE,	
						 d.value('@ID_EMPRESA', 'UNIQUEIDENTIFIER')  AS ID_EMPRESA,
						 @PIN_CL_USUARIO AS CL_USUARIO_APP_CREA,
						 @PIN_NB_PROGRAMA AS NB_PROGRAMA_CREA,
						 @CFE_SISTEMA AS FE_CREACION
					
					FROM @PIN_XML_EMPRESAS.nodes('EMPRESAS/EMPRESA') AS T(d)
						

							
		END 
		ELSE 
		BEGIN

			UPDATE ADM.C_CLIENTE SET
						CL_CLIENTE=@PIN_CL_CLIENTE,
						CL_PASSWORD=@PIN_CL_PASSWORD,
						NB_CLIENTE=@PIN_NB_CLIENTE,
						NB_CONTACTO=@PIN_NB_CONTACTO,
						CL_EMAIL=@PIN_CL_EMAIL,
						XML_TELEFONOS=@PIN_XML_TELEFONOS,
						NB_EJECUTIVO_CUENTA=@PIN_NB_EJECUTIVO_CUENTA,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_CLIENTE = @PIN_ID_CLIENTE

			
			MERGE Lic.K_EMPRESA_CLIENTE AS target
				USING(
						select 
							d.value('@ID_EMPRESA_CLIENTE', 'UNIQUEIDENTIFIER')  AS ID_EMPRESA_CLIENTE,
							d.value('@ID_EMPRESA', 'UNIQUEIDENTIFIER')  AS ID_EMPRESA,
							@PIN_ID_CLIENTE AS ID_CLIENTE
					FROM @PIN_XML_EMPRESAS.nodes('EMPRESAS/EMPRESA') AS T(d)
					) AS source (ID_EMPRESA_CLIENTE, ID_EMPRESA, ID_CLIENTE)
				ON (target.ID_EMPRESA_CLIENTE = source.ID_EMPRESA_CLIENTE)
				WHEN MATCHED THEN
					UPDATE SET 
							  ID_EMPRESA=source.ID_EMPRESA,
							  FE_MODIFICACION = @CFE_SISTEMA,
							  CL_USUARIO_APP_MODIFICA = @PIN_CL_USUARIO,
							  NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA
				WHEN NOT MATCHED  THEN
				INSERT (
					ID_EMPRESA_CLIENTE, 
					ID_EMPRESA, 
					ID_CLIENTE, 
					FE_CREACION,
					CL_USUARIO_APP_CREA,
					NB_PROGRAMA_CREA
				)
				VALUES (NEWID(), 
						source.ID_EMPRESA, 
						source.ID_CLIENTE, 
						@CFE_SISTEMA,
						@PIN_CL_USUARIO, 
						@PIN_NB_PROGRAMA )
				WHEN NOT MATCHED BY SOURCE AND target.ID_CLIENTE = @PIN_ID_CLIENTE  THEN DELETE;
				
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_LICENCIA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Inserta un nuevo C_LICENCIA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_LICENCIA] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_LICENCIA as uniqueidentifier,
		@PIN_CL_LICENCIA nvarchar (10),
		@PIN_NB_LICENCIA nvarchar (200),
		@PIN_FG_PERIODO bit,
		@PIN_FG_VOLUMEN bit,
		@PIN_DS_LICENCIA nvarchar (500),
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO ADM.C_LICENCIA(
						ID_LICENCIA,
						CL_LICENCIA,
						NB_LICENCIA,
						FG_PERIODO,
						FG_VOLUMEN,
						DS_LICENCIA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						 @PIN_CL_LICENCIA,
						 @PIN_NB_LICENCIA,
						 @PIN_FG_PERIODO,
						 @PIN_FG_VOLUMEN,
						 @PIN_DS_LICENCIA,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )			
		END ELSE BEGIN
			UPDATE ADM.C_LICENCIA SET
						CL_LICENCIA=@PIN_CL_LICENCIA,
						NB_LICENCIA=@PIN_NB_LICENCIA,
						FG_PERIODO=@PIN_FG_PERIODO,
						FG_VOLUMEN=@PIN_FG_VOLUMEN,
						DS_LICENCIA=@PIN_DS_LICENCIA,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_LICENCIA = @PIN_ID_LICENCIA
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_MODULO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Inserta un nuevo C_MODULO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_MODULO] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_MODULO as uniqueidentifier,
		@PIN_CL_MODULO nvarchar (10),
		@PIN_NB_MODULO nvarchar (500),
		@PIN_DS_MODULO nvarchar (200),
		@PIN_ID_SISTEMA uniqueidentifier,
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO ADM.C_MODULO(
						ID_MODULO,
						CL_MODULO,
						NB_MODULO,
						DS_MODULO,
						ID_SISTEMA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						 @PIN_CL_MODULO,
						 @PIN_NB_MODULO,
						 @PIN_DS_MODULO,
						 @PIN_ID_SISTEMA,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )			
		END ELSE BEGIN
			UPDATE ADM.C_MODULO SET
						CL_MODULO=@PIN_CL_MODULO,
						NB_MODULO=@PIN_NB_MODULO,
						DS_MODULO=@PIN_DS_MODULO,
						ID_SISTEMA=@PIN_ID_SISTEMA,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_MODULO = @PIN_ID_MODULO
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_SISTEMA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 26/12/2017
-- Description: Inserta un nuevo C_SISTEMA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_SISTEMA] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_SISTEMA as uniqueidentifier,
		@PIN_CL_SISTEMA nvarchar (10),
		@PIN_NB_SISTEMA nvarchar (200),
		@PIN_CL_TIPO nvarchar (200),
		@PIN_DS_SISTEMA nvarchar(500),
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO ADM.C_SISTEMA(
						ID_SISTEMA,
						CL_SISTEMA,
						NB_SISTEMA,
						CL_TIPO,
						DS_SISTEMA,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						 @PIN_CL_SISTEMA,
						 @PIN_NB_SISTEMA,
						 @PIN_CL_TIPO,
						 @PIN_DS_SISTEMA,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )			
		END ELSE BEGIN
			UPDATE ADM.C_SISTEMA SET
						CL_SISTEMA=@PIN_CL_SISTEMA,
						NB_SISTEMA=@PIN_NB_SISTEMA,
						CL_TIPO=@PIN_CL_TIPO,
						DS_SISTEMA=@PIN_DS_SISTEMA,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_SISTEMA = @PIN_ID_SISTEMA
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_VERSION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Inserta un nuevo C_VERSION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_VERSION] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	@PIN_ID_VERSION as uniqueidentifier,
		@PIN_ID_MODULO as uniqueidentifier,
		@PIN_NO_RELEASE as decimal(13,2),
		@PIN_DS_VERSION nvarchar (500),
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO ADM.C_VERSION(
						ID_VERSION,
						ID_MODULO,
						NO_RELEASE,
						DS_VERSION,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						 @PIN_ID_MODULO,
						 @PIN_NO_RELEASE,
						 @PIN_DS_VERSION,
						 @PIN_CL_USUARIO,
						 @PIN_NB_PROGRAMA,
						 @CFE_SISTEMA )			
		END ELSE BEGIN

			UPDATE ADM.C_VERSION SET
						ID_MODULO=@PIN_ID_MODULO,
						NO_RELEASE=@PIN_NO_RELEASE,
						DS_VERSION=@PIN_DS_VERSION,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA= @PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_VERSION = @PIN_ID_VERSION
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_CLIENTES]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 22/12/2017
-- Description: Obtiene los clientes de C_CLIENTE
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_CLIENTES]
	@PIN_ID_CLIENTE as uniqueidentifier,
	@PIN_CL_CLIENTE nvarchar (10),
	@PIN_CL_PASSWORD nvarchar (100),
	@PIN_NB_CLIENTE nvarchar (200),
	@PIN_NB_CONTACTO nvarchar (200),
	@PIN_CL_EMAIL nvarchar(100),
	@PIN_NB_EJECUTIVO_CUENTA nvarchar (200)

AS   
	BEGIN
	
	SELECT ID_CLIENTE,
		   CL_CLIENTE,
		   CL_PASSWORD,
		   NB_CLIENTE,
		   NB_CONTACTO,
		   CL_EMAIL,
		   XML_TELEFONOS,
		   NB_EJECUTIVO_CUENTA
		   FROM ADM.C_CLIENTE
		   WHERE (@PIN_ID_CLIENTE IS NULL OR (@PIN_ID_CLIENTE IS NOT NULL AND ID_CLIENTE=@PIN_ID_CLIENTE))
		   AND (@PIN_CL_CLIENTE IS NULL OR (@PIN_CL_CLIENTE IS NOT NULL AND CL_CLIENTE=@PIN_CL_CLIENTE))
		   AND (@PIN_CL_PASSWORD IS NULL OR (@PIN_CL_PASSWORD IS NOT NULL AND CL_PASSWORD=@PIN_CL_PASSWORD))
		   AND (@PIN_NB_CLIENTE IS NULL OR (@PIN_NB_CLIENTE IS NOT NULL AND NB_CLIENTE=@PIN_NB_CLIENTE))
		   AND (@PIN_NB_CONTACTO IS NULL OR (@PIN_NB_CONTACTO IS NOT NULL AND NB_CONTACTO=@PIN_NB_CONTACTO))
		   AND (@PIN_CL_EMAIL IS NULL OR (@PIN_CL_EMAIL IS NOT NULL AND CL_EMAIL=@PIN_CL_EMAIL))
		   AND (@PIN_NB_EJECUTIVO_CUENTA IS NULL OR (@PIN_NB_EJECUTIVO_CUENTA IS NOT NULL AND NB_EJECUTIVO_CUENTA=@PIN_NB_EJECUTIVO_CUENTA))
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_EMPRESA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 27/12/2017
-- Description: Obtiene los C_EMPRESA
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_EMPRESA]
	@PIN_ID_EMPRESA as uniqueidentifier,
	@PIN_CL_EMPRESA nvarchar (10),
	@PIN_NB_EMPRESA nvarchar (200),
	@PIN_DS_EMPRESA nvarchar (500)

AS   
	BEGIN
	
	SELECT ID_EMPRESA,
		   CL_EMPRESA,
		   NB_EMPRESA,
		   DS_EMPRESA
		   FROM ADM.C_EMPRESA
		   WHERE (@PIN_ID_EMPRESA IS NULL OR (@PIN_ID_EMPRESA IS NOT NULL AND ID_EMPRESA=@PIN_ID_EMPRESA))
		     AND (@PIN_CL_EMPRESA IS NULL OR (@PIN_CL_EMPRESA IS NOT NULL AND CL_EMPRESA=@PIN_CL_EMPRESA))
		     AND (@PIN_NB_EMPRESA IS NULL OR (@PIN_NB_EMPRESA IS NOT NULL AND NB_EMPRESA=@PIN_NB_EMPRESA))
		     AND (@PIN_DS_EMPRESA IS NULL OR (@PIN_DS_EMPRESA IS NOT NULL AND DS_EMPRESA=@PIN_DS_EMPRESA))
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_LICENCIA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 27/12/2017
-- Description: Obtiene los C_LICENCIA
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_LICENCIA]
	@PIN_ID_LICENCIA as uniqueidentifier,
	@PIN_CL_LICENCIA nvarchar (10),
	@PIN_NB_LICENCIA nvarchar (200),
	@PIN_FG_PERIODO bit,
	@PIN_FG_VOLUMEN bit,
	@PIN_DS_LICENCIA nvarchar (500)

AS   
	BEGIN
	
	SELECT ID_LICENCIA,
		   CL_LICENCIA,
		   NB_LICENCIA,
		   CASE FG_PERIODO WHEN 1 THEN 'SI' ELSE 'NO' END AS FG_PERIODO,
		   CASE FG_VOLUMEN WHEN 1 THEN 'SI' ELSE 'NO' END AS FG_VOLUMEN,
		   DS_LICENCIA
		   FROM ADM.C_LICENCIA
		   WHERE (@PIN_ID_LICENCIA IS NULL OR (@PIN_ID_LICENCIA IS NOT NULL AND ID_LICENCIA=@PIN_ID_LICENCIA))
		     AND (@PIN_CL_LICENCIA IS NULL OR (@PIN_CL_LICENCIA IS NOT NULL AND CL_LICENCIA=@PIN_CL_LICENCIA))
		     AND (@PIN_NB_LICENCIA IS NULL OR (@PIN_NB_LICENCIA IS NOT NULL AND NB_LICENCIA=@PIN_NB_LICENCIA))
		     AND (@PIN_FG_PERIODO IS NULL OR (@PIN_FG_PERIODO IS NOT NULL AND FG_PERIODO=@PIN_FG_PERIODO))
		     AND (@PIN_FG_VOLUMEN IS NULL OR (@PIN_FG_VOLUMEN IS NOT NULL AND FG_VOLUMEN=@PIN_FG_VOLUMEN))
		     AND (@PIN_DS_LICENCIA IS NULL OR (@PIN_DS_LICENCIA IS NOT NULL AND DS_LICENCIA=@PIN_DS_LICENCIA))
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_MODULO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 26/12/2017
-- Description: Obtiene los C_MODULO
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_MODULO]
	@PIN_ID_MODULO as uniqueidentifier,
	@PIN_CL_MODULO nvarchar (10),
	@PIN_NB_MODULO nvarchar (200),
	@PIN_DS_MODULO nvarchar (200),
	@PIN_ID_SISTEMA as uniqueidentifier,
	@PIN_CL_SISTEMA nvarchar (10),
	@PIN_NB_SISTEMA nvarchar (200)
	

AS   
	BEGIN
	
	SELECT CM.ID_MODULO,
		   CM.CL_MODULO,
		   CM.NB_MODULO,
		   CM.DS_MODULO,
		   CS.ID_SISTEMA,
		   CS.NB_SISTEMA,
		   CS.CL_SISTEMA
	FROM ADM.C_MODULO CM
	INNER JOIN ADM.C_SISTEMA CS ON CM.ID_SISTEMA=CS.ID_SISTEMA
	WHERE (@PIN_ID_MODULO IS NULL OR (@PIN_ID_MODULO IS NOT NULL AND CM.ID_MODULO= @PIN_ID_MODULO))
	  AND (@PIN_CL_MODULO IS NULL OR (@PIN_CL_MODULO IS NOT NULL AND CM.CL_MODULO= @PIN_CL_MODULO))
	  AND (@PIN_NB_MODULO IS NULL OR (@PIN_NB_MODULO IS NOT NULL AND CM.NB_MODULO= @PIN_NB_MODULO))
	  AND (@PIN_DS_MODULO IS NULL OR (@PIN_DS_MODULO IS NOT NULL AND CM.DS_MODULO= @PIN_DS_MODULO))
	  AND (@PIN_ID_SISTEMA IS NULL OR (@PIN_ID_SISTEMA IS NOT NULL AND CS.ID_SISTEMA= @PIN_ID_SISTEMA))
	  AND (@PIN_CL_SISTEMA IS NULL OR (@PIN_CL_SISTEMA IS NOT NULL AND CS.CL_SISTEMA= @PIN_CL_SISTEMA))
	  AND (@PIN_NB_SISTEMA IS NULL OR (@PIN_NB_SISTEMA IS NOT NULL AND CS.NB_SISTEMA= @PIN_NB_SISTEMA))
	 
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_SISTEMA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 26/12/2017
-- Description: Obtiene los C_SISTEMA
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_SISTEMA]
	@PIN_ID_SISTEMA as uniqueidentifier,
	@PIN_CL_SISTEMA nvarchar (10),
	@PIN_NB_SISTEMA nvarchar (200),
	@PIN_CL_TIPO nvarchar (200),
	@PIN_DS_SISTEMA nvarchar(500)

AS   
	BEGIN
	
	SELECT ID_SISTEMA,
		   CL_SISTEMA,
		   NB_SISTEMA,
		   CL_TIPO,
		   DS_SISTEMA
	FROM ADM.C_SISTEMA
	WHERE (@PIN_ID_SISTEMA IS NULL OR (@PIN_ID_SISTEMA IS NOT NULL AND ID_SISTEMA= @PIN_ID_SISTEMA))
	  AND (@PIN_CL_SISTEMA IS NULL OR (@PIN_CL_SISTEMA IS NOT NULL AND CL_SISTEMA= @PIN_CL_SISTEMA))
	  AND (@PIN_NB_SISTEMA IS NULL OR (@PIN_NB_SISTEMA IS NOT NULL AND NB_SISTEMA= @PIN_NB_SISTEMA))
	  AND (@PIN_CL_TIPO IS NULL OR (@PIN_CL_TIPO IS NOT NULL AND CL_TIPO= @PIN_CL_TIPO))
	  AND (@PIN_DS_SISTEMA IS NULL OR (@PIN_DS_SISTEMA IS NOT NULL AND DS_SISTEMA= @PIN_DS_SISTEMA))
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_VERSION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 27/12/2017
-- Description: Obtiene los C_VERSION
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_VERSION]
	@PIN_ID_VERSION as uniqueidentifier,
	@PIN_ID_MODULO as uniqueidentifier,
	@PIN_NO_RELEASE as decimal(13,2),
	@PIN_DS_VERSION nvarchar (500)
AS   
	BEGIN
	
	SELECT CV.ID_VERSION,
		   CV.NO_RELEASE,
		   CV.DS_VERSION,
		   CM.ID_MODULO,
		   CM.NB_MODULO,
		   CM.CL_MODULO 
	FROM ADM.C_VERSION CV
	INNER JOIN ADM.C_MODULO CM ON CV.ID_MODULO= CM.ID_MODULO
	WHERE (@PIN_ID_VERSION IS NULL OR (@PIN_ID_VERSION IS NOT NULL AND CV.ID_VERSION=@PIN_ID_VERSION))
	AND (@PIN_ID_MODULO IS NULL OR (@PIN_ID_MODULO IS NOT NULL AND CM.ID_MODULO=@PIN_ID_MODULO))
	AND (@PIN_NO_RELEASE IS NULL OR (@PIN_NO_RELEASE IS NOT NULL AND CV.NO_RELEASE=@PIN_NO_RELEASE))
	AND (@PIN_DS_VERSION IS NULL OR (@PIN_DS_VERSION IS NOT NULL AND CV.DS_VERSION=@PIN_DS_VERSION))
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_CATALOGO_LISTA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un registro de la tabla C_CATALOGO_LISTA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_CATALOGO_LISTA]
	@XML_RESULTADO XML OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_CATALOGO_LISTA AS int, 
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		DECLARE @IBV INT 
		SET @IBV = @@TRANCOUNT
		PRINT @IBV

		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE BORRA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_LISTA
		DELETE FROM ADM.C_CATALOGO_LISTA
		WHERE [ID_CATALOGO_LISTA] = @PIN_ID_CATALOGO_LISTA
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
	    SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el cátalogo lista satisfactoriamente', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el cátalogo lista satisfactoriamente', 'EN')
		
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

			SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
	
	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_CATALOGO_VALOR]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un registro de la tabla C_CATALOGO_VALOR
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_CATALOGO_VALOR]
	@XML_RESULTADO XML OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_CATALOGO_VALOR AS int, 
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE BORRA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_VALOR
		DELETE FROM ADM.C_CATALOGO_VALOR
		WHERE [ID_CATALOGO_VALOR] = @PIN_ID_CATALOGO_VALOR
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
	    SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el cátalogo valor satisfactoriamente', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el cátalogo valor satisfactoriamente', 'EN')
		
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
		
	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_S_ERROR]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo S_ERROR
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_S_ERROR] 
    	
        @PIN_CL_CLAVE AS int,
        @PIN_DS_ERROR AS nvarchar(250),
        @PIN_CL_USUARIO_APP_CREA AS nvarchar(50),
        @PIN_NB_PROGRAMA_CREA AS nvarchar(50)AS 
BEGIN  
	DECLARE @V_EXIST_TRAN BIT = 0
    BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE SETEA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE DECLARA LA LLAVE PRIMARIA DEL ERROR
		DECLARE @PIN_ID_ERROR AS uniqueidentifier = NEWID()
		--SE INSERTA EL ERROR EN LA TABLA S_ERROR
		INSERT INTO ADM.K_ERROR
			([ID_ERROR],[CL_CLAVE],[DS_ERROR],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA])
		VALUES
			(@PIN_ID_ERROR,@PIN_CL_CLAVE,@PIN_DS_ERROR,GETDATE(),@PIN_CL_USUARIO_APP_CREA,@PIN_NB_PROGRAMA_CREA)
		--SE SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK	  
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_ROL_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un C_ROL_FUNCION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_ROL_FUNCION]
	@POUT_CLAVE_RETORNO  VARCHAR(40) OUT,    --APLICA PARA REGRESAR UN NÚMERO DE (ERROR, ERROR CONTROLADO, O IDENTIFICADOR)
	@PIN_ID_ROL AS int,
    @PIN_ID_FUNCION AS int,
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50),
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50)
AS   
BEGIN
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		IF (@@TRANCOUNT = 0) 
		BEGIN
			BEGIN TRANSACTION
			SET @V_EXIST_TRAN = 1
		END	
		DELETE FROM ADM.C_ROL_FUNCION WHERE ID_ROL = @PIN_ID_ROL AND ID_FUNCION = @PIN_ID_FUNCION

		SET @POUT_CLAVE_RETORNO = '-1000' -- Clave: -1000 proceso satisfactorio

		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH	
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
		ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA	
		DECLARE @ERROR_CLAVE INT  = ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = ERROR_MESSAGE()
		EXEC ADM.SPE_INSERTA_S_ERROR
		@PIN_CL_CLAVE = @ERROR_CLAVE,
		@PIN_DS_ERROR = @ERROR_MENSAJE,
		@PIN_CL_USUARIO_APP_CREA =@PIN_CL_USUARIO_APP_CREA,
		@PIN_NB_PROGRAMA_CREA = @PIN_NB_PROGRAMA_CREA

	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_C_USUARIO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un registro de la tabla C_USUARIO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_C_USUARIO]
	@XML_RESULTADO XML OUT,     --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_CL_USUARIO AS nvarchar(50), 
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE BORRA EL REGISTRO EN LA TABLA  ADM.C_USUARIO
		DELETE FROM ADM.C_USUARIO
		WHERE [CL_USUARIO] = @PIN_CL_USUARIO
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_ROL]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un rol
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_ROL]
	@XML_RESULTADO XML OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_ROL AS INT, 
	@PIN_CL_USUARIO_APP_CREA AS NVARCHAR(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS NVARCHAR(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		DELETE FROM ADM.C_ROL_FUNCION WHERE ID_ROL = @PIN_ID_ROL

		DELETE FROM ADM.C_ROL WHERE ID_ROL = @PIN_ID_ROL
				
        SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el rol satisfactoriamente', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Se eliminó el rol satisfactoriamente', 'EN')
					
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_S_CATALOGO_TIPO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un registro de la tabla S_CATALOGO_TIPO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_S_CATALOGO_TIPO]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_CATALOGO_TIPO AS int, 
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE BORRA EL REGISTRO EN LA TABLA  ADM.S_CATALOGO_TIPO
		DELETE FROM ADM.S_CATALOGO_TIPO
		WHERE [ID_CATALOGO_TIPO] = @PIN_ID_CATALOGO_TIPO
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_ELIMINA_S_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Elimina un S_FUNCION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_ELIMINA_S_FUNCION]
	@XML_RESULTADO XML OUT,     --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_FUNCION AS int, 
	@PIN_CL_USUARIO_APP_CREA AS nvarchar(50), --USUARIO QUE MANDA A ELIMINAR EL REGISTRO
	@PIN_NB_PROGRAMA_CREA AS nvarchar(50) -- PROGRAMA DONDE EL USUARIO MANDA ELIMINAR EL REGISTRO
AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE BORRA EL REGISTRO EN LA TABLA  ADM.S_FUNCION
		DELETE FROM ADM.S_FUNCION
		WHERE [ID_FUNCION] = @PIN_ID_FUNCION
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_CATALOGO_LISTA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo registro en la tabla C_CATALOGO_LISTA
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_CATALOGO_LISTA] 
		  @XML_RESULTADO XML = '' OUT     --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_CATALOGO_LISTA AS int
		, @PIN_NB_CATALOGO_LISTA AS nvarchar(100)
		, @PIN_DS_CATALOGO_LISTA AS nvarchar(1000)
		, @PIN_ID_CATALOGO_TIPO AS int
		, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
		, @PIN_CL_USUARIO_APP_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP

		----- VALIDAR QUE NO SE REPITA NOMBRE Y DESCRIPCION EM CATALOGO

		DECLARE @V_NB_CATALOGO_LISTA INT
			   ,@V_DS_CATALOGO_LISTA INT

		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_LISTA

		/*	SET @V_NB_CATALOGO_LISTA = (SELECT COUNT(*) FROM ADM.C_CATALOGO_LISTA WHERE NB_CATALOGO_LISTA = @PIN_NB_CATALOGO_LISTA)
			SET @V_DS_CATALOGO_LISTA = (SELECT COUNT(*) FROM ADM.C_CATALOGO_LISTA WHERE DS_CATALOGO_LISTA = @PIN_DS_CATALOGO_LISTA)

			-- VALIDA LA EXISTENCIA DE ALGUN REGISTRO CON EL MISMO NOMBRE
			IF @V_NB_CATALOGO_LISTA > 0
				--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 2627
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  =ERROR_MESSAGE()
		
			BEGIN
				SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
				SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'ES')
				SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'EN')
				ROLLBACK TRANSACTION
				RETURN;
			END
			*/
			-- VALIDA LA EXISTENCIA DE ALGUN REGISTRO CON LA MISMA DESCRIPCIÓN
			/*IF @V_DS_CATALOGO_LISTA > 0
			BEGIN
				SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 4, 'WARNING')
				SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Descripción repetida', 'ES')
				SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Descripción repetida', 'EN')
				ROLLBACK TRANSACTION
				RETURN;
			END
			*/

			INSERT INTO ADM.C_CATALOGO_LISTA
					   ([NB_CATALOGO_LISTA]
						, [DS_CATALOGO_LISTA]
						, [ID_CATALOGO_TIPO]
						, [FE_CREACION]
						, [CL_USUARIO_APP_CREA]
						, [NB_PROGRAMA_CREA]
					)
			VALUES
					   ( @PIN_NB_CATALOGO_LISTA
						, @PIN_DS_CATALOGO_LISTA
						, @PIN_ID_CATALOGO_TIPO
						,  @CFE_SISTEMA
						, @PIN_CL_USUARIO_APP_CREA
						, @PIN_NB_PROGRAMA_CREA
					)			
		END 
		ELSE 
			BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_LISTA
			UPDATE ADM.C_CATALOGO_LISTA SET
				[NB_CATALOGO_LISTA] = @PIN_NB_CATALOGO_LISTA
				, [DS_CATALOGO_LISTA] = @PIN_DS_CATALOGO_LISTA
				, [ID_CATALOGO_TIPO] = @PIN_ID_CATALOGO_TIPO
				, [FE_MODIFICACION] =@CFE_SISTEMA
				, [CL_USUARIO_APP_MODIFICA] = @PIN_CL_USUARIO_APP_MODIFICA
				, [NB_PROGRAMA_MODIFICA] = @PIN_NB_PROGRAMA_MODIFICA
			       
			WHERE [ID_CATALOGO_LISTA] = @PIN_ID_CATALOGO_LISTA
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_CATALOGO_VALOR]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo registro en la tabla C_CATALOGO_VALOR
-- =============================================
-- 20/11/2015 MS - Se cambia el valor de retorno
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_CATALOGO_VALOR] 
		@XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_CATALOGO_VALOR AS int
		, @PIN_CL_CATALOGO_VALOR AS nvarchar(20)
		, @PIN_NB_CATALOGO_VALOR AS nvarchar(100)
		, @PIN_DS_CATALOGO_VALOR AS nvarchar(1000)
		, @PIN_ID_CATALOGO_LISTA AS int
		, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
		, @PIN_CL_USUARIO_APP_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		DECLARE @V_CL_CATALOGO_VALOR INT 
			   ,@V_NB_CATALOGO_VALOR INT
			   ,@V_DS_CATALOGO_VALOR INT


		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
/*
					SET @V_CL_CATALOGO_VALOR = (SELECT COUNT(*) FROM ADM.C_CATALOGO_VALOR WHERE CL_CATALOGO_VALOR = @PIN_CL_CATALOGO_VALOR)
		SET @V_NB_CATALOGO_VALOR = (SELECT COUNT(*) FROM ADM.C_CATALOGO_VALOR WHERE NB_CATALOGO_VALOR = @PIN_NB_CATALOGO_VALOR)
		SET @V_DS_CATALOGO_VALOR = (SELECT COUNT(*) FROM ADM.C_CATALOGO_VALOR WHERE DS_CATALOGO_VALOR = @PIN_DS_CATALOGO_VALOR)

		-- VALIDA LA EXISTENCIA DE ALGUN REGISTRO CON LA MISMA CLAVE
		IF @V_CL_CATALOGO_VALOR > 0
		BEGIN
			SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 2, 'WARNING')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'ES')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'EN')
			ROLLBACK TRANSACTION
			RETURN;
		END

		-- VALIDA LA EXISTENCIA DE ALGUN REGISTRO CON EL MISMO NOMBRE
		IF @V_NB_CATALOGO_VALOR > 0
		BEGIN
			SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 3, 'WARNING')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'ES')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Nombre repetido', 'EN')
			ROLLBACK TRANSACTION
			RETURN;
		END

		-- VALIDA LA EXISTENCIA DE ALGUN REGISTRO CON LA MISMA DESCRIPCIÓN
		IF @V_DS_CATALOGO_VALOR > 0
		BEGIN
			SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 4, 'WARNING')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Descripción repetida', 'ES')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Descripción repetida', 'EN')
			ROLLBACK TRANSACTION
			RETURN;
		END
		*/
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_VALOR
			INSERT INTO ADM.C_CATALOGO_VALOR
					   ([CL_CATALOGO_VALOR]
						, [NB_CATALOGO_VALOR]
						, [DS_CATALOGO_VALOR]
						, [ID_CATALOGO_LISTA]
						, [FE_CREACION]
						, [CL_USUARIO_APP_CREA]
						, [NB_PROGRAMA_CREA]
					)
			VALUES
					   (@PIN_CL_CATALOGO_VALOR
						, @PIN_NB_CATALOGO_VALOR
						, @PIN_DS_CATALOGO_VALOR
						, @PIN_ID_CATALOGO_LISTA
						, @CFE_SISTEMA
						, @PIN_CL_USUARIO_APP_CREA
						, @PIN_NB_PROGRAMA_CREA
					)			
		END ELSE BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.C_CATALOGO_VALOR
			UPDATE ADM.C_CATALOGO_VALOR SET
				[CL_CATALOGO_VALOR] = @PIN_CL_CATALOGO_VALOR
				, [NB_CATALOGO_VALOR] = @PIN_NB_CATALOGO_VALOR
				, [DS_CATALOGO_VALOR] = @PIN_DS_CATALOGO_VALOR
				, [ID_CATALOGO_LISTA] = @PIN_ID_CATALOGO_LISTA
				, [FE_MODIFICACION] =@CFE_SISTEMA
				, [CL_USUARIO_APP_MODIFICA] = @PIN_CL_USUARIO_APP_MODIFICA
				, [NB_PROGRAMA_MODIFICA] = @PIN_NB_PROGRAMA_MODIFICA
			       
			WHERE [ID_CATALOGO_VALOR] = @PIN_ID_CATALOGO_VALOR
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
			--IF ERROR_NUMBER() = 2627 
			--SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), 'No se puede agregar un mismo valor en el catálogo ' + '\"' + @PIN_NB_CATALOGO_VALOR  + '\"' )
			--		ELSE
	 	--    SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
		   IF ERROR_NUMBER() = 2627 
		    SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), 'Ya existe esa clave para este catalogo ' + '\"' + @PIN_CL_CATALOGO_VALOR + '\"' )
			ELSE
 		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_ROL]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo C_ROL
-- =============================================
-- Alter date: 01/10/15 MS - Se modifica la fecha inactiva.
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_ROL] 
	      @XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_ROL AS int
		, @PIN_CL_ROL AS nvarchar(30)
		, @PIN_NB_ROL AS nvarchar(100)
		, @PIN_XML_AUTORIZACION AS xml
		, @PIN_FG_ACTIVO AS bit
		, @PIN_FE_INACTIVO AS datetime
		, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
		, @PIN_CL_USUARIO_APP_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.FGETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN

			DECLARE @VAR_FE_INACTIVO DATETIME = NULL

			IF  @PIN_FG_ACTIVO = 0
			BEGIN
				SET @VAR_FE_INACTIVO = GETDATE()
			END

			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.C_ROL
			INSERT INTO ADM.C_ROL
					   ([CL_ROL]
						, [NB_ROL]
						, [XML_AUTORIZACION]
						, [FG_ACTIVO]
						, [FE_INACTIVO]
						, [FE_CREACION]
						, [CL_USUARIO_APP_CREA]
						, [NB_PROGRAMA_CREA]
					)
			VALUES
					   (@PIN_CL_ROL
						, @PIN_NB_ROL
						, @PIN_XML_AUTORIZACION
						, @PIN_FG_ACTIVO
						, @VAR_FE_INACTIVO
						, @CFE_SISTEMA
						, @PIN_CL_USUARIO_APP_CREA
						, @PIN_NB_PROGRAMA_CREA
					)			
		END ELSE BEGIN

			IF  @PIN_FG_ACTIVO = 0
			BEGIN
				SET @VAR_FE_INACTIVO = @CFE_SISTEMA
			END
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.C_ROL
			UPDATE ADM.C_ROL SET
				[CL_ROL] = @PIN_CL_ROL
				, [NB_ROL] = @PIN_NB_ROL
				, [XML_AUTORIZACION] = @PIN_XML_AUTORIZACION
				, [FG_ACTIVO] = @PIN_FG_ACTIVO
				, [FE_INACTIVO] = @VAR_FE_INACTIVO
				, [FE_MODIFICACION] = @CFE_SISTEMA
				, [CL_USUARIO_APP_MODIFICA] = @PIN_CL_USUARIO_APP_MODIFICA
				, [NB_PROGRAMA_MODIFICA] = @PIN_NB_PROGRAMA_MODIFICA
			       
			WHERE [ID_ROL] = @PIN_ID_ROL
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK

		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_ROL_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo C_ROL_FUNCION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_ROL_FUNCION] 
	      @XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_ROL AS int
		, @PIN_ID_FUNCION AS int
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN
		, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)
AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.C_ROL_FUNCION
			INSERT INTO ADM.C_ROL_FUNCION
					   ([ID_ROL]
						, [ID_FUNCION]
					)
			VALUES
					   (@PIN_ID_ROL
						, @PIN_ID_FUNCION
					)			
		END ELSE BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.C_ROL_FUNCION
			UPDATE ADM.C_ROL_FUNCION SET
				[ID_ROL] = @PIN_ID_ROL
				, [ID_FUNCION] = @PIN_ID_FUNCION
			       
			WHERE [ID_ROL] = @PIN_ID_ROL
				AND [ID_FUNCION] = @PIN_ID_FUNCION			
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_LICENCIAMIENTO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2018
-- Author: Levy Urbieta
-- CREATE date: 02/01/2018
-- Description: Obtiene el licenciamiento de los modulos especificados
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_LICENCIAMIENTO]
	
	@PIN_CL_CLIENTE as nvarchar (10),
	@PIN_CL_PASSWORD as nvarchar (100),
	@PIN_CL_SISTEMA as nvarchar (10),
	@PIN_CL_EMPRESA as nvarchar (10),
	@PIN_CL_MODULO as nvarchar (10),
	@PIN_NO_VERSION as decimal(13,10),
	@PIN_CL_LICENCIA as nvarchar (10)			
AS   
	BEGIN
	
	SELECT KGP.ID_GESTION_PERIODO,
		   CC.CL_CLIENTE,
		   CC.CL_PASSWORD,
		   CS.CL_SISTEMA,
		   CE.CL_EMPRESA,
		   CM.CL_MODULO,
		   CV.NO_RELEASE,
		   CL.CL_LICENCIA,
		   KGP.FE_INICIO,
		   KGP.FE_FIN,
		   KGP.NO_VOLUMEN
	FROM Lic.K_GESTION_PERIODO KGP
	INNER JOIN ADM.C_CLIENTE CC ON CC.ID_CLIENTE=KGP.ID_CLIENTE
	INNER JOIN ADM.C_SISTEMA CS ON CS.ID_SISTEMA=KGP.ID_SISTEMA
	INNER JOIN ADM.C_EMPRESA CE ON CE.ID_EMPRESA=KGP.ID_EMPRESA
	INNER JOIN ADM.C_MODULO CM ON CM.ID_MODULO=KGP.ID_MODULO
	INNER JOIN ADM.C_VERSION CV ON CV.ID_VERSION=KGP.ID_VERSION
	INNER JOIN ADM.C_LICENCIA CL ON CL.ID_LICENCIA=KGP.ID_LICENCIA
	WHERE (@PIN_CL_CLIENTE IS NULL OR(@PIN_CL_CLIENTE IS NOT NULL AND CC.CL_CLIENTE = @PIN_CL_CLIENTE))
	  AND (@PIN_CL_PASSWORD IS NULL OR (@PIN_CL_PASSWORD IS NOT NULL AND CC.CL_PASSWORD = @PIN_CL_PASSWORD))
	  AND (@PIN_CL_SISTEMA IS NULL OR (@PIN_CL_SISTEMA IS NOT NULL AND CS.CL_SISTEMA = @PIN_CL_SISTEMA))
	  AND (@PIN_CL_EMPRESA IS NULL OR ( @PIN_CL_EMPRESA IS NOT NULL AND CE.CL_EMPRESA = @PIN_CL_EMPRESA))
	  AND (@PIN_CL_MODULO IS NULL OR (@PIN_CL_MODULO IS NOT NULL AND CM.CL_MODULO = @PIN_CL_MODULO))
	  AND (@PIN_NO_VERSION IS NULL OR (@PIN_NO_VERSION IS NOT NULL AND CV.NO_RELEASE = @PIN_NO_VERSION))
	  AND (@PIN_CL_LICENCIA IS NULL OR (@PIN_CL_LICENCIA IS NOT NULL AND CL.CL_LICENCIA = @PIN_CL_LICENCIA))
	ORDER BY FE_FIN DESC

END


--EXEC [ADM].[SPE_OBTIENE_LICENCIAMIENTO] 'CL02', '002', '002', '00001', 1.0, 'LIC03'
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_C_USUARIO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo registro en la tabla C_USUARIO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_C_USUARIO] 
	       @XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_CL_USUARIO AS nvarchar(50)
		, @PIN_NB_USUARIO AS nvarchar(300)
		, @PIN_NB_CORREO_ELECTRONICO AS nvarchar(500)
		, @PIN_NB_PASSWORD AS nvarchar(100)
		, @PIN_FG_CAMBIAR_PASSWORD AS bit
		, @PIN_XML_PERSONALIZACION AS xml
		, @PIN_ID_ROL AS int
		, @PIN_ID_EMPLEADO AS int
		, @PIN_FG_ACTIVO AS bit
		, @PIN_FE_INACTIVO AS datetime
		, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
		, @PIN_CL_USUARIO_APP_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
		,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.C_USUARIO
			INSERT INTO ADM.C_USUARIO
					   ([NB_USUARIO]
						, [NB_CORREO_ELECTRONICO]
						, [NB_PASSWORD]
						, [FG_CAMBIAR_PASSWORD]
						, [XML_PERSONALIZACION]
						, [ID_ROL]
						, [ID_EMPLEADO]
						, [FG_ACTIVO]
						, [FE_INACTIVO]
						, [FE_CREACION]
						, [CL_USUARIO_APP_CREA]
						, [NB_PROGRAMA_CREA]
					)
			VALUES
					   (@PIN_NB_USUARIO
						, @PIN_NB_CORREO_ELECTRONICO
						, @PIN_NB_PASSWORD
						, @PIN_FG_CAMBIAR_PASSWORD
						, @PIN_XML_PERSONALIZACION
						, @PIN_ID_ROL
						, @PIN_ID_EMPLEADO
						, @PIN_FG_ACTIVO
						, @PIN_FE_INACTIVO
						, @CFE_SISTEMA
						, @PIN_CL_USUARIO_APP_CREA
						, @PIN_NB_PROGRAMA_CREA
					)			
		END ELSE BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.C_USUARIO
			UPDATE ADM.C_USUARIO SET
				[NB_USUARIO] = @PIN_NB_USUARIO
				, [NB_CORREO_ELECTRONICO] = @PIN_NB_CORREO_ELECTRONICO
				, [NB_PASSWORD] = @PIN_NB_PASSWORD
				, [FG_CAMBIAR_PASSWORD] = @PIN_FG_CAMBIAR_PASSWORD
				, [XML_PERSONALIZACION] = @PIN_XML_PERSONALIZACION
				, [ID_ROL] = @PIN_ID_ROL
				, [ID_EMPLEADO] = @PIN_ID_EMPLEADO
				, [FG_ACTIVO] = @PIN_FG_ACTIVO
				, [FE_INACTIVO] = @PIN_FE_INACTIVO
				, [FE_MODIFICACION] = @CFE_SISTEMA
				, [CL_USUARIO_APP_MODIFICA] = @PIN_CL_USUARIO_APP_MODIFICA
				, [NB_PROGRAMA_MODIFICA] = @PIN_NB_PROGRAMA_MODIFICA
			       
			WHERE [CL_USUARIO] = @PIN_CL_USUARIO
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_INFORMACION_CLIENTE]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2018
-- Author: Levy Urbieta
-- CREATE date: 02/01/2018
-- Description: Obtiene el licenciamiento de los modulos especificados
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_INFORMACION_CLIENTE]
	
	@PIN_CL_CLIENTE as nvarchar (10) = NULL,
	@PIN_CL_PASSWORD as nvarchar (100) = NULL
		
AS   
	BEGIN
	
	DECLARE 
		@V_ID_CLIENTE uniqueidentifier =  NULL,
		@V_CL_CLIENTE nvarchar (10) =  NULL,
		@V_FE_CREACION nvarchar (20) =  NULL,
		@V_CL_PASSWORD nvarchar (100) =  NULL,
		@V_XML_SISTEMAS as xml, 
		@V_XML_EMPRESAS as xml, 
		@V_XML_MODULOS as xml,
		@V_XML_VERSIONES as xml, 
		@V_XML_CATALOGOS as xml


SET @V_XML_SISTEMAS =(
SELECT 
		KGP.ID_SISTEMA AS "@ID_SISTEMA",
		CL_SISTEMA AS "@CL_SISTEMA",
		NB_SISTEMA AS "@NB_SISTEMA"
		FROM Lic.K_GESTION_PERIODO KGP
		INNER JOIN ADM.C_SISTEMA CS ON KGP.ID_SISTEMA=CS.ID_SISTEMA
		INNER JOIN ADM.C_CLIENTE CC ON KGP.ID_CLIENTE= CC.ID_CLIENTE
		WHERE CC.CL_CLIENTE=@PIN_CL_CLIENTE
		  AND CC.CL_PASSWORD= @PIN_CL_PASSWORD
		GROUP BY KGP.ID_SISTEMA,CL_SISTEMA,NB_SISTEMA
		ORDER BY CL_SISTEMA
		FOR XML PATH ('SISTEMA'), ROOT ('SISTEMAS')
)


SET @V_XML_EMPRESAS =(
SELECT 
		KGP.ID_SISTEMA AS "@ID_SISTEMA",
		KGP.ID_EMPRESA AS "@ID_EMPRESA",
		CL_EMPRESA AS "@CL_EMPRESA",
		NB_EMPRESA AS "@NB_EMPRESA"
		FROM Lic.K_GESTION_PERIODO KGP
		INNER JOIN ADM.C_EMPRESA CE ON KGP.ID_EMPRESA=CE.ID_EMPRESA
		INNER JOIN ADM.C_CLIENTE CC ON KGP.ID_CLIENTE= CC.ID_CLIENTE
		WHERE CC.CL_CLIENTE=@PIN_CL_CLIENTE
		  AND CC.CL_PASSWORD= @PIN_CL_PASSWORD
		GROUP BY KGP.ID_SISTEMA,KGP.ID_EMPRESA,CL_EMPRESA, NB_EMPRESA
		ORDER BY CL_EMPRESA
		FOR XML PATH ('EMPRESA'), ROOT ('EMPRESAS')
)


SET @V_XML_MODULOS =(
SELECT 
		KGP.ID_SISTEMA AS "@ID_SISTEMA",
		KGP.ID_MODULO AS "@ID_MODULO",
		CM.CL_MODULO AS "@CL_MODULO",
		NB_MODULO AS "@NB_MODULO"
		FROM Lic.K_GESTION_PERIODO KGP
		INNER JOIN ADM.C_CLIENTE CC ON KGP.ID_CLIENTE= CC.ID_CLIENTE
		INNER JOIN ADM.C_MODULO CM ON KGP.ID_MODULO= CM.ID_MODULO
		INNER JOIN ADM.C_SISTEMA CS ON CM.ID_SISTEMA=CS.ID_SISTEMA
		WHERE CC.CL_CLIENTE=@PIN_CL_CLIENTE
		  AND CC.CL_PASSWORD= @PIN_CL_PASSWORD
		GROUP BY KGP.ID_SISTEMA, KGP.ID_MODULO, CM.CL_MODULO, NB_MODULO
		ORDER BY CL_MODULO
		FOR XML PATH ('MODULO'), ROOT ('MODULOS')
)

	

SET @V_XML_VERSIONES =(
SELECT 
		KGP.ID_MODULO AS "@ID_MODULO",
		KGP.ID_VERSION AS "@ID_VERSION",
		NO_RELEASE AS "@NO_RELEASE"
		FROM Lic.K_GESTION_PERIODO KGP
		INNER JOIN ADM.C_CLIENTE CC ON KGP.ID_CLIENTE= CC.ID_CLIENTE
		INNER JOIN ADM.C_VERSION CS ON CS.ID_VERSION=KGP.ID_VERSION
		INNER JOIN ADM.C_MODULO CM ON CS.ID_MODULO= CM.ID_MODULO
		WHERE CC.CL_CLIENTE=@PIN_CL_CLIENTE
		  AND CC.CL_PASSWORD= @PIN_CL_PASSWORD
		GROUP BY KGP.ID_MODULO, KGP.ID_VERSION, NO_RELEASE
		ORDER BY NO_RELEASE
		FOR XML PATH ('VERSION'), ROOT ('VERSIONES')
)

	
	 SET @V_XML_CATALOGOS = (
		SELECT 
			@V_XML_SISTEMAS,
			@V_XML_EMPRESAS,
			@V_XML_MODULOS,
			@V_XML_VERSIONES
		FOR XML PATH ('CATALOGOS')
	)
	
	SELECT @V_ID_CLIENTE = ID_CLIENTE,
		   @V_CL_CLIENTE = CL_CLIENTE,
		   @V_FE_CREACION = CONVERT(NVARCHAR, FE_CREACION, 120),
		   @V_CL_PASSWORD = CL_PASSWORD
	FROM ADM.C_CLIENTE
	WHERE CL_CLIENTE=@PIN_CL_CLIENTE
	  AND CL_PASSWORD=@PIN_CL_PASSWORD

	SELECT @V_ID_CLIENTE AS ID_CLIENTE,
		   @V_CL_CLIENTE AS CL_CLIENTE,
		   @V_FE_CREACION AS FE_CREACION,
		   @V_CL_PASSWORD AS CL_PASSWORD,
		   @V_XML_CATALOGOS AS CATALOGOS

END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_S_CATALOGO_TIPO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo registro en la tabla S_CATALOGO_TIPO
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_S_CATALOGO_TIPO] 
	      @XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_CATALOGO_TIPO AS int
		, @PIN_NB_CATALOGO_TIPO AS nvarchar(100)
		, @PIN_DS_CATALOGO_TIPO AS nvarchar(1000)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN
		, @PIN_CL_USUARIO_APP_CREA NVARCHAR(50)
		, @PIN_NB_PROGRAMA_CREA NVARCHAR(50)
AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.S_CATALOGO_TIPO
			INSERT INTO ADM.S_CATALOGO_TIPO
					   ([NB_CATALOGO_TIPO]
						, [DS_CATALOGO_TIPO]
					)
			VALUES
					   (@PIN_NB_CATALOGO_TIPO
						, @PIN_DS_CATALOGO_TIPO
					)			
		END ELSE BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.S_CATALOGO_TIPO
			UPDATE ADM.S_CATALOGO_TIPO SET
				[NB_CATALOGO_TIPO] = @PIN_NB_CATALOGO_TIPO
				, [DS_CATALOGO_TIPO] = @PIN_DS_CATALOGO_TIPO
			       
			WHERE [ID_CATALOGO_TIPO] = @PIN_ID_CATALOGO_TIPO
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_S_CONFIGURACION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo registro en la tabla S_CONFIGURACION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_S_CONFIGURACION] 
		  @XML_RESULTADO XML = '' OUT		      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_XML_CONFIGURACION AS xml
		, @PIN_FI_LOGOTIPO AS VARBINARY(MAX)
		, @PIN_CL_USUARIO_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
		, @FE_SISTEMA DATETIME = DBO.F_GETDATE()
		, @ID_ARCHIVO INT
		, @NB_ARCHIVO NVARCHAR(512)
		, @XML_CONFIGURACION XML = (SELECT TOP 1 XML_CONFIGURACION FROM ADM.S_CONFIGURACION)

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I' BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.S_CONFIGURACION
			INSERT INTO ADM.S_CONFIGURACION (XML_CONFIGURACION, CL_USUARIO_MODIFICA)
			VALUES (@PIN_XML_CONFIGURACION, @PIN_CL_USUARIO_MODIFICA)			
		END ELSE BEGIN

			DECLARE @XML_LOGOTIPO XML = (
				SELECT T.query('.') FROM @XML_CONFIGURACION.nodes('/CONFIGURACIONES/EMPRESA/LOGOTIPO') X(T)
			)

			DECLARE @ID_ARCHIVO_NUEVO INT
				, @NB_ARCHIVO_NUEVO NVARCHAR(512)
				--, @ID_ARCHIVO_ALMACENADO UNIQUEIDENTIFIER = SELECT TOP 1 NULLIF(@XML_CONFIGURACION_ALMACENADA.value('/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO', 'NVARCHAR(40)'), '')
				, @ID_ARCHIVO_ALMACENADO INT = (SELECT TOP 1 NULLIF(XML_CONFIGURACION.value('/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO', 'INT'), '0') FROM ADM.S_CONFIGURACION)

			SELECT @ID_ARCHIVO_NUEVO = NULLIF(T.value('@ID_ARCHIVO', 'INT'), '0')
				, @NB_ARCHIVO_NUEVO = T.value('@NB_ARCHIVO', 'NVARCHAR(512)')
			FROM @XML_LOGOTIPO.nodes('/LOGOTIPO') X(T)

			--SELECT @ID_ARCHIVO_NUEVO, @NB_ARCHIVO_NUEVO, @XML_LOGOTIPO

			IF(@XML_LOGOTIPO IS NULL) BEGIN
				DELETE FROM ADM.K_ARCHIVO WHERE ID_ARCHIVO = @ID_ARCHIVO_ALMACENADO
			END ELSE IF(@PIN_FI_LOGOTIPO IS NOT NULL) BEGIN
				MERGE ADM.K_ARCHIVO AS T USING (
					SELECT @ID_ARCHIVO_ALMACENADO
				) AS S (
					ID_ARCHIVO
				)
				ON S.ID_ARCHIVO = T.ID_ARCHIVO
				WHEN MATCHED THEN
					UPDATE SET NB_ARCHIVO = @NB_ARCHIVO_NUEVO
						, FI_ARCHIVO = @PIN_FI_LOGOTIPO
						, FE_MODIFICACION = @FE_SISTEMA
						, CL_USUARIO_APP_MODIFICA = @PIN_CL_USUARIO_MODIFICA
						, NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA_MODIFICA
				WHEN NOT MATCHED THEN 
					INSERT (
						NB_ARCHIVO
						, FI_ARCHIVO
						, FE_CREACION
						, CL_USUARIO_APP_CREA
						, NB_PROGRAMA_CREA
					) VALUES (
						@NB_ARCHIVO_NUEVO
						, @PIN_FI_LOGOTIPO
						, @FE_SISTEMA
						, @PIN_CL_USUARIO_MODIFICA
						, @PIN_NB_PROGRAMA_MODIFICA
					);

				IF @ID_ARCHIVO_NUEVO IS NULL BEGIN
					SET @ID_ARCHIVO_NUEVO = SCOPE_IDENTITY()
					SET @PIN_XML_CONFIGURACION.modify('replace value of (/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO[1]) with sql:variable("@ID_ARCHIVO_NUEVO") ')
				END
			END

			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.S_CONFIGURACION
			UPDATE ADM.S_CONFIGURACION SET
				XML_CONFIGURACION = @PIN_XML_CONFIGURACION
				, FE_MODIFICACION = @FE_SISTEMA
				, CL_USUARIO_MODIFICA = @PIN_CL_USUARIO_MODIFICA
				, NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA_MODIFICA
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_S_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Inserta un nuevo S_FUNCION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_S_FUNCION] 
	      @XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_FUNCION AS int
		, @PIN_CL_FUNCION AS nvarchar(30)
		, @PIN_CL_TIPO_FUNCION AS nvarchar(100)
		, @PIN_NB_FUNCION AS nvarchar(100)
		, @PIN_ID_FUNCION_PADRE AS int
		, @PIN_NB_URL AS nvarchar(500)
		, @PIN_XML_CONFIGURACION AS xml
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN
				, @PIN_CL_USUARIO_APP_CREA AS nvarchar(50)
				, @PIN_NB_PROGRAMA_CREA AS nvarchar(50)

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.S_FUNCION
			INSERT INTO ADM.S_FUNCION
					   ([CL_FUNCION]
						, [CL_TIPO_FUNCION]
						, [NB_FUNCION]
						, [ID_FUNCION_PADRE]
						, [NB_URL]
						, [XML_CONFIGURACION]
					)
			VALUES
					   (@PIN_CL_FUNCION
						, @PIN_CL_TIPO_FUNCION
						, @PIN_NB_FUNCION
						, @PIN_ID_FUNCION_PADRE
						, @PIN_NB_URL
						, @PIN_XML_CONFIGURACION
					)			
		END ELSE BEGIN
			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.S_FUNCION
			UPDATE ADM.S_FUNCION SET
				[CL_FUNCION] = @PIN_CL_FUNCION
				, [CL_TIPO_FUNCION] = @PIN_CL_TIPO_FUNCION
				, [NB_FUNCION] = @PIN_NB_FUNCION
				, [ID_FUNCION_PADRE] = @PIN_ID_FUNCION_PADRE
				, [NB_URL] = @PIN_NB_URL
				, [XML_CONFIGURACION] = @PIN_XML_CONFIGURACION
			       
			WHERE [ID_FUNCION] = @PIN_ID_FUNCION
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_CATALOGO_LISTA]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los datos de la tabla C_CATALOGO_LISTA 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_CATALOGO_LISTA] 
	@PIN_ID_CATALOGO_LISTA AS int = NULL
	, @PIN_NB_CATALOGO_LISTA AS nvarchar(100) = NULL
	, @PIN_DS_CATALOGO_LISTA AS nvarchar(1000) = NULL
	, @PIN_ID_CATALOGO_TIPO AS int = NULL
	
AS   
	--SE DEVUELVE LOS REGISTROS EN BASE A LOS PARAMETROS INSERTADOS
	SELECT 
		[ID_CATALOGO_LISTA]
		, [NB_CATALOGO_LISTA]
		, [DS_CATALOGO_LISTA]
		, CC.ID_CATALOGO_TIPO
		, CT.NB_CATALOGO_TIPO
		, [FG_SISTEMA]
		, (CASE WHEN CC.FE_MODIFICACION IS NOT NULL THEN CAST(CC.FE_MODIFICACION AS DATE)
		       WHEN CC.FE_MODIFICACION IS NULL THEN CAST(CC.FE_CREACION AS DATE) END) AS FE_MODIFICACION
	    , (CASE WHEN CC.CL_USUARIO_APP_MODIFICA IS NOT NULL THEN CC.CL_USUARIO_APP_MODIFICA
		       WHEN CC.CL_USUARIO_APP_MODIFICA IS NULL THEN CC.CL_USUARIO_APP_CREA END) AS CL_USUARIO_MODIFICA
	FROM ADM.C_CATALOGO_LISTA CC
	JOIN ADM.S_CATALOGO_TIPO CT ON CC.ID_CATALOGO_TIPO = CT.ID_CATALOGO_TIPO
	WHERE (@PIN_ID_CATALOGO_LISTA IS NULL OR (@PIN_ID_CATALOGO_LISTA IS NOT NULL AND [ID_CATALOGO_LISTA] = @PIN_ID_CATALOGO_LISTA))
			 AND (@PIN_NB_CATALOGO_LISTA IS NULL OR (@PIN_NB_CATALOGO_LISTA IS NOT NULL AND [NB_CATALOGO_LISTA] = @PIN_NB_CATALOGO_LISTA))
			 AND (@PIN_DS_CATALOGO_LISTA IS NULL OR (@PIN_DS_CATALOGO_LISTA IS NOT NULL AND [DS_CATALOGO_LISTA] = @PIN_DS_CATALOGO_LISTA))
			 AND (@PIN_ID_CATALOGO_TIPO IS NULL OR (@PIN_ID_CATALOGO_TIPO IS NOT NULL AND CC.ID_CATALOGO_TIPO = @PIN_ID_CATALOGO_TIPO))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_CATALOGO_VALOR]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los datos de la tabla C_CATALOGO_VALOR 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_CATALOGO_VALOR] 
	@PIN_ID_CATALOGO_VALOR AS int = NULL
	, @PIN_CL_CATALOGO_VALOR AS nvarchar(20) = NULL
	, @PIN_NB_CATALOGO_VALOR AS nvarchar(100) = NULL
	, @PIN_DS_CATALOGO_VALOR AS nvarchar(1000) = NULL
	, @PIN_ID_CATALOGO_LISTA AS int = NULL
	
AS   
	--SE DEVUELVE LOS REGISTROS EN BASE A LOS PARAMETROS INSERTADOS
	SELECT 
		[ID_CATALOGO_VALOR]
		, [CL_CATALOGO_VALOR]
		, [NB_CATALOGO_VALOR]
		, [DS_CATALOGO_VALOR]
		, CC.ID_CATALOGO_LISTA
		, CL.NB_CATALOGO_LISTA
	FROM ADM.C_CATALOGO_VALOR CC
	JOIN ADM.C_CATALOGO_LISTA CL ON CC.ID_CATALOGO_LISTA = CL.ID_CATALOGO_LISTA 
	WHERE (@PIN_ID_CATALOGO_VALOR IS NULL OR (@PIN_ID_CATALOGO_VALOR IS NOT NULL AND [ID_CATALOGO_VALOR] = @PIN_ID_CATALOGO_VALOR))
			 AND (@PIN_CL_CATALOGO_VALOR IS NULL OR (@PIN_CL_CATALOGO_VALOR IS NOT NULL AND [CL_CATALOGO_VALOR] = @PIN_CL_CATALOGO_VALOR))
			 AND (@PIN_NB_CATALOGO_VALOR IS NULL OR (@PIN_NB_CATALOGO_VALOR IS NOT NULL AND [NB_CATALOGO_VALOR] = @PIN_NB_CATALOGO_VALOR))
			 AND (@PIN_DS_CATALOGO_VALOR IS NULL OR (@PIN_DS_CATALOGO_VALOR IS NOT NULL AND [DS_CATALOGO_VALOR] = @PIN_DS_CATALOGO_VALOR))
			 AND (@PIN_ID_CATALOGO_LISTA IS NULL OR (@PIN_ID_CATALOGO_LISTA IS NOT NULL AND CC.ID_CATALOGO_LISTA = @PIN_ID_CATALOGO_LISTA))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_ROL]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los C_ROL 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_ROL] 
	    @PIN_ID_ROL AS int = NULL,
        @PIN_CL_ROL AS nvarchar(30) = NULL,
        @PIN_NB_ROL AS nvarchar(100) = NULL,
        @PIN_XML_AUTORIZACION AS xml = NULL,
        @PIN_FG_ACTIVO AS bit = NULL,
        @PIN_FE_INACTIVO AS datetime = NULL

AS   
	SELECT 
		[ID_ROL],
		[CL_ROL],
		[NB_ROL],
		[XML_AUTORIZACION],
		[FG_ACTIVO],
		[FE_INACTIVO]
		,'' as DS_FILTRO
	FROM ADM.C_ROL
	WHERE (@PIN_ID_ROL IS NULL OR (@PIN_ID_ROL IS NOT NULL AND [ID_ROL] = @PIN_ID_ROL)) AND 
			(@PIN_CL_ROL IS NULL OR (@PIN_CL_ROL IS NOT NULL AND [CL_ROL] = @PIN_CL_ROL)) AND 
			(@PIN_NB_ROL IS NULL OR (@PIN_NB_ROL IS NOT NULL AND [NB_ROL] = @PIN_NB_ROL)) AND 
			(@PIN_FG_ACTIVO IS NULL OR (@PIN_FG_ACTIVO IS NOT NULL AND [FG_ACTIVO] = @PIN_FG_ACTIVO)) AND 
			(@PIN_FE_INACTIVO IS NULL OR (@PIN_FE_INACTIVO IS NOT NULL AND [FE_INACTIVO] = @PIN_FE_INACTIVO))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_ROL_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los C_ROL_FUNCION 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_ROL_FUNCION] 
	    @PIN_ID_ROL AS int = NULL,
        @PIN_ID_FUNCION AS int = NULL

AS   
	SELECT 
		 rf.ID_ROL,
		 rf.ID_FUNCION
		, R.NB_ROL
		,R.CL_ROL
		,R.XML_AUTORIZACION
		,F.CL_FUNCION
		,F.CL_TIPO_FUNCION
		,F.NB_FUNCION
		,F.NB_URL
		,F.XML_CONFIGURACION
		,F.ID_FUNCION_PADRE
		,'' as DS_FILTRO
	FROM ADM.C_ROL_FUNCION as rf
	join Adm.C_ROL as r ON r.id_rol = rf.ID_ROL
	join ADM.S_FUNCION AS F ON F.ID_FUNCION = RF.ID_FUNCION
	WHERE (@PIN_ID_ROL IS NULL OR (@PIN_ID_ROL IS NOT NULL AND  rf.ID_ROL = @PIN_ID_ROL)) AND 
(@PIN_ID_FUNCION IS NULL OR (@PIN_ID_FUNCION IS NOT NULL AND  rf.ID_FUNCION = @PIN_ID_FUNCION))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_C_USUARIO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los datos de la tabla C_USUARIO 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_C_USUARIO] 
	@PIN_CL_USUARIO AS nvarchar(50) = NULL
	, @PIN_NB_USUARIO AS nvarchar(300) = NULL
	, @PIN_NB_CORREO_ELECTRONICO AS nvarchar(500) = NULL
	, @PIN_NB_PASSWORD AS nvarchar(100) = NULL
	, @PIN_FG_CAMBIAR_PASSWORD AS bit = NULL
	, @PIN_XML_PERSONALIZACION AS xml = NULL
	, @PIN_ID_ROL AS int = NULL
	, @PIN_ID_EMPLEADO AS int = NULL
	, @PIN_FG_ACTIVO AS bit = NULL
	, @PIN_FE_INACTIVO AS datetime = NULL
	
AS   
	--SE DEVUELVE LOS REGISTROS EN BASE A LOS PARAMETROS INSERTADOS
	SELECT 
		[CL_USUARIO]
		, [NB_USUARIO]
		, [NB_CORREO_ELECTRONICO]
		, [NB_PASSWORD]
		, [FG_CAMBIAR_PASSWORD]
		, [XML_PERSONALIZACION]
		, [ID_ROL]
		, [ID_EMPLEADO]
		, [FG_ACTIVO]
		, [FE_INACTIVO]
		,'' as DS_FILTRO
	FROM ADM.C_USUARIO
	WHERE (@PIN_CL_USUARIO IS NULL OR (@PIN_CL_USUARIO IS NOT NULL AND [CL_USUARIO] = @PIN_CL_USUARIO))
			 AND (@PIN_NB_USUARIO IS NULL OR (@PIN_NB_USUARIO IS NOT NULL AND [NB_USUARIO] = @PIN_NB_USUARIO))
			 AND (@PIN_NB_CORREO_ELECTRONICO IS NULL OR (@PIN_NB_CORREO_ELECTRONICO IS NOT NULL AND [NB_CORREO_ELECTRONICO] = @PIN_NB_CORREO_ELECTRONICO))
			 AND (@PIN_NB_PASSWORD IS NULL OR (@PIN_NB_PASSWORD IS NOT NULL AND [NB_PASSWORD] = @PIN_NB_PASSWORD))
			 AND (@PIN_FG_CAMBIAR_PASSWORD IS NULL OR (@PIN_FG_CAMBIAR_PASSWORD IS NOT NULL AND [FG_CAMBIAR_PASSWORD] = @PIN_FG_CAMBIAR_PASSWORD))
			 --AND (@PIN_XML_PERSONALIZACION IS NULL OR (@PIN_XML_PERSONALIZACION IS NOT NULL AND [XML_PERSONALIZACION] = @PIN_XML_PERSONALIZACION))
			 AND (@PIN_ID_ROL IS NULL OR (@PIN_ID_ROL IS NOT NULL AND [ID_ROL] = @PIN_ID_ROL))
			 AND (@PIN_ID_EMPLEADO IS NULL OR (@PIN_ID_EMPLEADO IS NOT NULL AND [ID_EMPLEADO] = @PIN_ID_EMPLEADO))
			 AND (@PIN_FG_ACTIVO IS NULL OR (@PIN_FG_ACTIVO IS NOT NULL AND [FG_ACTIVO] = @PIN_FG_ACTIVO))
			 AND (@PIN_FE_INACTIVO IS NULL OR (@PIN_FE_INACTIVO IS NOT NULL AND [FE_INACTIVO] = @PIN_FE_INACTIVO))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_LICENCIAS]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2018
-- Author: Levy Urbieta
-- CREATE date: 10/01/2018
-- Description: Obtiene el XML con las licencias del cliente especificado
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_LICENCIAS]
	
	@PIN_CL_CLIENTE as nvarchar (10),
	@PIN_CL_PASSWORD as nvarchar (100)

AS
	BEGIN
	
	DECLARE 
		@V_FE_CREACION as NVARCHAR (20),
		@V_XML_LICENCIAS as xml

SET @V_XML_LICENCIAS=(
	SELECT CC.CL_CLIENTE AS "@CL_CLIENTE",
		   CS.CL_SISTEMA AS "@CL_SISTEMA",
		   CE.CL_EMPRESA AS "@CL_EMPRESA",
		   CM.CL_MODULO AS "@CL_MODULO",
		   CV.NO_RELEASE AS "@NO_RELEASE",
		   CL.CL_LICENCIA AS "@CL_LICENCIA",
		   KGP.FE_INICIO AS "@FE_INICIO",
		   KGP.FE_FIN AS "@FE_FIN",
		   KGP.NO_VOLUMEN AS "@NO_VOLUMEN"
	FROM Lic.K_GESTION_PERIODO KGP
	INNER JOIN ADM.C_CLIENTE CC ON CC.ID_CLIENTE=KGP.ID_CLIENTE
	INNER JOIN ADM.C_SISTEMA CS ON CS.ID_SISTEMA=KGP.ID_SISTEMA
	INNER JOIN ADM.C_EMPRESA CE ON CE.ID_EMPRESA=KGP.ID_EMPRESA
	INNER JOIN ADM.C_MODULO CM ON CM.ID_MODULO=KGP.ID_MODULO
	INNER JOIN ADM.C_VERSION CV ON CV.ID_VERSION=KGP.ID_VERSION
	INNER JOIN ADM.C_LICENCIA CL ON CL.ID_LICENCIA=KGP.ID_LICENCIA
	WHERE (@PIN_CL_CLIENTE IS NULL OR(@PIN_CL_CLIENTE IS NOT NULL AND CC.CL_CLIENTE = @PIN_CL_CLIENTE))
	  AND (@PIN_CL_PASSWORD IS NULL OR (@PIN_CL_PASSWORD IS NOT NULL AND CC.CL_PASSWORD = @PIN_CL_PASSWORD))
	ORDER BY FE_FIN DESC
	FOR XML PATH ('LICENCIA'), ROOT ('LICENCIAS')
	)

	SELECT @V_FE_CREACION = CONVERT(NVARCHAR, FE_CREACION, 120)
		FROM ADM.C_CLIENTE
		WHERE CL_CLIENTE=@PIN_CL_CLIENTE
		  AND CL_PASSWORD= @PIN_CL_PASSWORD

	SELECT @V_XML_LICENCIAS AS XML_LICENCIAS,
			@V_FE_CREACION AS FE_CREACION

END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_S_CATALOGO_TIPO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los datos de la tabla S_CATALOGO_TIPO 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_S_CATALOGO_TIPO] 
	@PIN_ID_CATALOGO_TIPO AS int = NULL
	, @PIN_NB_CATALOGO_TIPO AS nvarchar(100) = NULL
	, @PIN_DS_CATALOGO_TIPO AS nvarchar(1000) = NULL
	
AS   
	--SE DEVUELVE LOS REGISTROS EN BASE A LOS PARAMETROS INSERTADOS
	SELECT 
		[ID_CATALOGO_TIPO]
		, [NB_CATALOGO_TIPO]
		, [DS_CATALOGO_TIPO]
		
	FROM ADM.S_CATALOGO_TIPO
	WHERE (@PIN_ID_CATALOGO_TIPO IS NULL OR (@PIN_ID_CATALOGO_TIPO IS NOT NULL AND [ID_CATALOGO_TIPO] = @PIN_ID_CATALOGO_TIPO))
			 AND (@PIN_NB_CATALOGO_TIPO IS NULL OR (@PIN_NB_CATALOGO_TIPO IS NOT NULL AND [NB_CATALOGO_TIPO] = @PIN_NB_CATALOGO_TIPO))
			 AND (@PIN_DS_CATALOGO_TIPO IS NULL OR (@PIN_DS_CATALOGO_TIPO IS NOT NULL AND [DS_CATALOGO_TIPO] = @PIN_DS_CATALOGO_TIPO))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_S_CONFIGURACION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los datos de la tabla S_CONFIGURACION 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_S_CONFIGURACION] 
	  @PIN_XML_CONFIGURACION AS xml = NULL
	, @PIN_CL_USUARIO_MODIFICA AS nvarchar(50) = NULL
	
AS   
	--SE DEVUELVE LOS REGISTROS EN BASE A LOS PARAMETROS INSERTADOS
	DECLARE @XML_CONFIGURACION XML = (
		SELECT TOP 1 XML_CONFIGURACION FROM ADM.S_CONFIGURACION
	)			

	DECLARE @FI_LOGOTIPO VARBINARY(MAX) = (
		SELECT TOP 1 FI_ARCHIVO FROM ADM.K_ARCHIVO WHERE ID_ARCHIVO = @XML_CONFIGURACION.value('/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO[1]', 'INT')
	)

	SELECT @XML_CONFIGURACION AS XML_CONFIGURACION
		, @FI_LOGOTIPO AS FI_LOGOTIPO
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_S_FUNCION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los S_FUNCION 
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_S_FUNCION] 
	    @PIN_ID_FUNCION AS int = NULL,
        @PIN_CL_FUNCION AS nvarchar(30) = NULL,
        @PIN_CL_TIPO_FUNCION AS nvarchar(100) = NULL,
        @PIN_NB_FUNCION AS nvarchar(100) = NULL,
        @PIN_ID_FUNCION_PADRE AS int = NULL,
        @PIN_NB_URL AS nvarchar(500) = NULL,
        @PIN_XML_CONFIGURACION AS xml = NULL

AS   
	SELECT 
			[ID_FUNCION],
			[CL_FUNCION],
			[CL_TIPO_FUNCION],
			[NB_FUNCION],
			[ID_FUNCION_PADRE],
			[NB_URL],
			[XML_CONFIGURACION]
			,'' as DS_FILTRO
	FROM ADM.S_FUNCION
	WHERE (@PIN_ID_FUNCION IS NULL OR (@PIN_ID_FUNCION IS NOT NULL AND [ID_FUNCION] = @PIN_ID_FUNCION)) AND 
			(@PIN_CL_FUNCION IS NULL OR (@PIN_CL_FUNCION IS NOT NULL AND [CL_FUNCION] = @PIN_CL_FUNCION)) AND 
			(@PIN_CL_TIPO_FUNCION IS NULL OR (@PIN_CL_TIPO_FUNCION IS NOT NULL AND [CL_TIPO_FUNCION] = @PIN_CL_TIPO_FUNCION)) AND 
			(@PIN_NB_FUNCION IS NULL OR (@PIN_NB_FUNCION IS NOT NULL AND [NB_FUNCION] = @PIN_NB_FUNCION)) AND 
			(@PIN_ID_FUNCION_PADRE IS NULL OR (@PIN_ID_FUNCION_PADRE IS NOT NULL AND [ID_FUNCION_PADRE] = @PIN_ID_FUNCION_PADRE)) AND 
			(@PIN_NB_URL IS NULL OR (@PIN_NB_URL IS NOT NULL AND [NB_URL] = @PIN_NB_URL))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_USUARIO_AUTENTICACION]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene la autenticación del usuario
-- =============================================
CREATE PROCEDURE [ADM].[SPE_OBTIENE_USUARIO_AUTENTICACION]
	@PIN_CL_USUARIO AS NVARCHAR(50) = NULL
	,@PIN_CL_PASSWORD AS NVARCHAR(50) = NULL
	,@PIN_CL_AUTENTICACION AS NVARCHAR(50) = NULL
AS   
BEGIN
	DECLARE @CL_AUTENTICACION NVARCHAR(50) = @PIN_CL_AUTENTICACION
		, @XML_AUTORIZACION XML

	--DECLARE @PIN_ID_EMPRESA INT  = NULL
	--	SET @PIN_ID_EMPRESA = (SELECT [ADM].[F_OBTIENE_ID_EMPRESA](@PIN_CL_USUARIO))
	

	;WITH T_USUARIO AS (
		SELECT TOP 1 CU.CL_USUARIO
			, CU.NB_USUARIO
			, CU.NB_PASSWORD
			, CU.NB_CORREO_ELECTRONICO
			, CU.FG_ACTIVO
			, CR.ID_ROL
			, CR.NB_ROL
			, CU.ID_EMPLEADO
			--, ISNULL(PL.ID_PUESTO,0) AS ID_PUESTO
		FROM ADM.C_USUARIO CU
			LEFT JOIN ADM.C_ROL CR
				ON CU.ID_ROL = CR.ID_ROL
			--LEFT JOIN ADM.K_PLAZA AS PL
			--	ON CU.ID_EMPLEADO= PL.ID_EMPLEADO 
				
		WHERE CU.CL_USUARIO = @PIN_CL_USUARIO
	)

	SELECT @CL_AUTENTICACION AS CL_AUTENTICACION
		, @XML_AUTORIZACION AS XML_AUTORIZACION
		, TU.CL_USUARIO
		, TU.NB_USUARIO
		, TU.NB_PASSWORD
		, TU.NB_CORREO_ELECTRONICO
		, TU.FG_ACTIVO
		, TU.NB_ROL
		, TU.ID_EMPLEADO
		--, TU.ID_PUESTO 
		--, @PIN_ID_EMPRESA AS ID_EMPRESA
		, CONVERT(XML, ( 
			SELECT  SF.CL_FUNCION AS '@CL_FUNCION'
				, SF.CL_TIPO_FUNCION AS '@CL_TIPO_FUNCION'
				, SF.ID_FUNCION AS '@ID_FUNCION'
				, SF.ID_FUNCION_PADRE AS '@ID_FUNCION_PADRE'
				, SF.NB_FUNCION AS '@NB_FUNCION'
				, SF.NB_URL AS '@NB_URL'
				, SF.NO_ORDEN AS '@NO_ORDEN'
				, SF.XML_CONFIGURACION
			FROM ADM.S_FUNCION SF
				INNER JOIN ADM.C_ROL_FUNCION CRF
					ON SF.ID_FUNCION = CRF.ID_FUNCION
				INNER JOIN T_USUARIO TU
					ON TU.ID_ROL = CRF.ID_ROL
				ORDER BY SF.NO_ORDEN
			FOR XML PATH ('FUNCION'), ROOT('FUNCIONES')
		)) AS XML_DATA
	FROM T_USUARIO TU


END
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_ROLES]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2015
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los roles del sistema
-- =============================================

CREATE PROCEDURE [ADM].[SPE_OBTIENE_ROLES]
	@PIN_ID_ROL AS INT = NULL
AS   
	SELECT CR.ID_ROL
		, CR.CL_ROL
		, CR.NB_ROL
		, CASE WHEN CR.FG_ACTIVO = 1 THEN 'Sí' ELSE 'No' END AS FG_ACTIVO
		, (CASE WHEN CR.FE_MODIFICACION IS NOT NULL THEN CAST(CR.FE_MODIFICACION AS DATE)
		       WHEN CR.FE_MODIFICACION IS NULL THEN CAST(CR.FE_CREACION AS DATE) END) AS FE_MODIFICACION
	    , (CASE WHEN CR.CL_USUARIO_APP_MODIFICA IS NOT NULL THEN CR.CL_USUARIO_APP_MODIFICA
		       WHEN CR.CL_USUARIO_APP_MODIFICA IS NULL THEN CR.CL_USUARIO_APP_CREA END) AS CL_USUARIO_MODIFICA
	FROM ADM.C_ROL CR
	WHERE (@PIN_ID_ROL IS NULL OR (@PIN_ID_ROL IS NOT NULL AND CR.ID_ROL = @PIN_ID_ROL))
GO
PRINT N'Creando [ADM].[SPE_OBTIENE_ROL]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2015
-- Author: Levy Urbieta
-- CREATE date: 21/12/2017
-- Description: Obtiene los roles del sistema
-- =============================================

create PROCEDURE [ADM].[SPE_OBTIENE_ROL]
	@PIN_ID_ROL AS INT = NULL
AS   
BEGIN
	DECLARE @ID_ROL INT
		, @CL_ROL NVARCHAR(30)
		, @NB_ROL NVARCHAR(100)
		, @FG_ACTIVO BIT
		, @XML_AUTORIZACION XML

	SELECT @ID_ROL = CR.ID_ROL
		, @CL_ROL = CR.CL_ROL
		, @NB_ROL = CR.NB_ROL
		, @FG_ACTIVO = CR.FG_ACTIVO
	FROM ADM.C_ROL CR
	WHERE CR.ID_ROL = @PIN_ID_ROL

	SET @XML_AUTORIZACION = (
		SELECT SF.ID_FUNCION AS "@ID_FUNCION"
			, SF.CL_FUNCION AS "@CL_FUNCION"
			, SF.CL_TIPO_FUNCION AS "@CL_TIPO_FUNCION"
			, SF.ID_FUNCION_PADRE AS "@ID_FUNCION_PADRE"
			, SF.NB_FUNCION AS "@NB_FUNCION"
			, CASE WHEN CRF.ID_FUNCION IS NOT NULL THEN 1 ELSE 0 END AS "@FG_SELECCIONADO"
		FROM ADM.S_FUNCION SF
			LEFT JOIN ADM.C_ROL_FUNCION CRF
				ON SF.ID_FUNCION = CRF.ID_FUNCION
				AND CRF.ID_ROL = @PIN_ID_ROL
		FOR XML PATH ('FUNCION'), ROOT ('FUNCIONES')
	)

	SELECT ISNULL(@ID_ROL, -1) AS ID_ROL
		, @CL_ROL AS CL_ROL
		, @NB_ROL AS NB_ROL
		, ISNULL(@FG_ACTIVO, 0) AS FG_ACTIVO
		, @XML_AUTORIZACION AS XML_AUTORIZACION
END
GO
PRINT N'Creando [ADM].[SPE_INSERTA_ACTUALIZA_ROLES]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamietno
-- Copyright (c) - Acrux - 2015
-- Author: Levy Urbieta
-- CRETAE date: 21/12/2017
-- Description: Ejecuta la operación para inserción o actualización del rol
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_ROLES] 
		  @XML_RESULTADO XML OUT     --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_ID_ROL AS INT = NULL
		, @PIN_CL_ROL AS NVARCHAR(30)
		, @PIN_NB_ROL AS NVARCHAR(100)
		, @PIN_FG_ACTIVO AS BIT
		, @PIN_XML_FUNCIONES AS XML
		, @PIN_CL_USUARIO AS NVARCHAR(50)
		, @PIN_NB_PROGRAMA AS NVARCHAR(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN
AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
		,@ID_ROL INT
		,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()


    BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END

		IF @PIN_TIPO_TRANSACCION = 'I' BEGIN
			INSERT INTO ADM.C_ROL (
				CL_ROL
				, NB_ROL
				, FG_ACTIVO
				, FE_INACTIVO
				, FE_CREACION
				, CL_USUARIO_APP_CREA
				, NB_PROGRAMA_CREA
			) VALUES (
				@PIN_CL_ROL
				, @PIN_NB_ROL
				, @PIN_FG_ACTIVO
				, CASE WHEN @PIN_FG_ACTIVO = 0 THEN @CFE_SISTEMA ELSE NULL END
				, @CFE_SISTEMA
				, @PIN_CL_USUARIO
				, @PIN_NB_PROGRAMA
			)

			SET @ID_ROL = SCOPE_IDENTITY()

			INSERT INTO ADM.C_ROL_FUNCION (ID_ROL, ID_FUNCION)
			SELECT @ID_ROL, n.value('@ID_FUNCION', 'INT')
			FROM @PIN_XML_FUNCIONES.nodes('/FUNCIONES/FUNCION') AS XT(n)

			SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO(@@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'El rol se agregó satisfactoriamente', 'ES')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'El rol se agregó satisfactoriamente', 'EN')
		END

		IF @PIN_TIPO_TRANSACCION = 'A' AND @PIN_ID_ROL IS NOT NULL BEGIN

			SET @ID_ROL = @PIN_ID_ROL

			UPDATE ADM.C_ROL
			SET CL_ROL = @PIN_CL_ROL
				, NB_ROL = @PIN_NB_ROL
				, FE_INACTIVO = CASE WHEN FG_ACTIVO = 1 AND @PIN_FG_ACTIVO = 0 THEN @CFE_SISTEMA ELSE FE_INACTIVO END
				, FG_ACTIVO = @PIN_FG_ACTIVO
				, FE_MODIFICACION = @CFE_SISTEMA
				, CL_USUARIO_APP_MODIFICA = @PIN_CL_USUARIO
				, NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA
			WHERE ID_ROL = @ID_ROL

			DELETE FROM ADM.C_ROL_FUNCION WHERE ID_ROL = @ID_ROL

			INSERT INTO ADM.C_ROL_FUNCION (ID_ROL, ID_FUNCION)
			SELECT @ID_ROL, n.value('@ID_FUNCION', 'INT')
			FROM @PIN_XML_FUNCIONES.nodes('/FUNCIONES/FUNCION') AS XT(n)

			SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO(@@ROWCOUNT, 1, 'SUCCESSFUL')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'El rol se editó satisfactoriamente', 'ES')
			SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'El rol se editó satisfactoriamente', 'EN')
		END

		
		-- EL XML DEVUELVE EL ERROR INDICADO POR SQL Y UN MSJ DE ERROR GENÉRICO

		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		
		-- EL XML DEVUELVE EL ERROR INDICADO POR SQL Y UN MSJ DE ERROR GENÉRICO
		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())
			
	END CATCH
END
GO
PRINT N'Creando [Lic].[SPE_OBTIENE_K_GESTION_PERIODOS]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CREATE date: 28/12/2017
-- Description: Obtiene los K_GESTION_PERIODO
-- =============================================

CREATE PROCEDURE [Lic].[SPE_OBTIENE_K_GESTION_PERIODOS]
	@PIN_ID_GESTION_PERIODO as uniqueidentifier,
	@PIN_ID_CLIENTE as uniqueidentifier,
	@PIN_ID_SISTEMA as uniqueidentifier,
	@PIN_ID_EMPRESA as uniqueidentifier,
	@PIN_ID_MODULO as uniqueidentifier,
	@PIN_ID_VERSION as uniqueidentifier,
	@PIN_ID_LICENCIA as uniqueidentifier,
	@PIN_FE_INICIO as datetime,
	@PIN_FE_FIN as datetime,
	@PIN_NO_VOLUMEN as int
			
AS   
	BEGIN
	
	SELECT KGP.ID_GESTION_PERIODO,
		   KGP.ID_CLIENTE,
		   CCL.NB_CLIENTE,
		   KGP.ID_SISTEMA,
		   CS.NB_SISTEMA,
		   KGP.ID_EMPRESA,
		   CE.NB_EMPRESA,
		   KGP.ID_MODULO,
		   CM.NB_MODULO,
		   KGP.ID_VERSION,
		   CV.NO_RELEASE,
		   KGP.ID_LICENCIA,
		   CL.NB_LICENCIA,
		   KGP.FE_INICIO,
		   KGP.FE_FIN,
		   KGP.NO_VOLUMEN
	FROM Lic.K_GESTION_PERIODO KGP
	INNER JOIN ADM.C_CLIENTE CCL ON KGP.ID_CLIENTE= CCL.ID_CLIENTE
	INNER JOIN ADM.C_SISTEMA CS ON KGP.ID_SISTEMA= CS.ID_SISTEMA
	INNER JOIN ADM.C_EMPRESA CE ON KGP.ID_EMPRESA= CE.ID_EMPRESA
	INNER JOIN ADM.C_MODULO CM ON KGP.ID_MODULO= CM.ID_MODULO
	INNER JOIN ADM.C_VERSION CV ON KGP.ID_VERSION= CV.ID_VERSION
	INNER JOIN ADM.C_LICENCIA CL ON KGP.ID_LICENCIA= CL.ID_LICENCIA
	WHERE (@PIN_ID_GESTION_PERIODO IS NULL OR (@PIN_ID_GESTION_PERIODO IS NOT NULL AND KGP.ID_GESTION_PERIODO=@PIN_ID_GESTION_PERIODO))
	  AND (@PIN_ID_CLIENTE IS NULL OR (@PIN_ID_CLIENTE IS NOT NULL AND KGP.ID_CLIENTE=@PIN_ID_CLIENTE))
	  AND (@PIN_ID_SISTEMA IS NULL OR (@PIN_ID_SISTEMA IS NOT NULL AND KGP.ID_SISTEMA=@PIN_ID_SISTEMA))
	  AND (@PIN_ID_EMPRESA IS NULL OR (@PIN_ID_EMPRESA IS NOT NULL AND KGP.ID_EMPRESA=@PIN_ID_EMPRESA))
	  AND (@PIN_ID_MODULO IS NULL OR (@PIN_ID_MODULO IS NOT NULL AND KGP.ID_MODULO=@PIN_ID_MODULO))
	  AND (@PIN_ID_VERSION IS NULL OR (@PIN_ID_VERSION IS NOT NULL AND KGP.ID_VERSION=@PIN_ID_VERSION))
	  AND (@PIN_ID_LICENCIA IS NULL OR (@PIN_ID_LICENCIA IS NOT NULL AND KGP.ID_LICENCIA=@PIN_ID_LICENCIA))
	  AND (@PIN_FE_INICIO IS NULL OR (@PIN_FE_INICIO IS NOT NULL AND KGP.FE_INICIO=@PIN_FE_INICIO))
	  AND (@PIN_FE_FIN IS NULL OR (@PIN_FE_FIN IS NOT NULL AND KGP.FE_FIN=@PIN_FE_FIN))
	  AND (@PIN_NO_VOLUMEN IS NULL OR (@PIN_NO_VOLUMEN IS NOT NULL AND KGP.NO_VOLUMEN=@PIN_NO_VOLUMEN))
END
GO
PRINT N'Creando [Lic].[SPE_INSERTA_ACTUALIZA_K_GESTION_PERIODO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 27/12/2017
-- Description: Inserta un nuevo K_GESTION_PERIODO
-- =============================================
CREATE PROCEDURE [Lic].[SPE_INSERTA_ACTUALIZA_K_GESTION_PERIODO] 
    	@XML_RESULTADO XML = '' OUT,      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
		@PIN_ID_GESTION_PERIODO as uniqueidentifier,
		@PIN_ID_CLIENTE as uniqueidentifier,
		@PIN_ID_SISTEMA as uniqueidentifier,
		@PIN_ID_EMPRESA as uniqueidentifier,
		@PIN_ID_MODULO as uniqueidentifier,
		@PIN_ID_VERSION as uniqueidentifier,
		@PIN_ID_LICENCIA as uniqueidentifier,
		@PIN_FE_INICIO as datetime,
		@PIN_FE_FIN as datetime,
		@PIN_NO_VOLUMEN as int,
		@PIN_CL_USUARIO AS nvarchar(50),
		@PIN_NB_PROGRAMA AS nvarchar(50),
		@PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	,@CFE_SISTEMA DATETIME = dbo.F_GETDATE()

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		


		IF @PIN_TIPO_TRANSACCION='I'
	    	BEGIN
			INSERT INTO Lic.K_GESTION_PERIODO(
						ID_GESTION_PERIODO,
						ID_CLIENTE,
						ID_SISTEMA,
						ID_EMPRESA,
						ID_MODULO,
						ID_VERSION,
						ID_LICENCIA,
						FE_INICIO,
						FE_FIN,
						NO_VOLUMEN,
						CL_USUARIO_APP_CREA,
						NB_PROGRAMA_CREA,
						FE_CREACION)
			VALUES
					   ( NEWID(),
						@PIN_ID_CLIENTE,
						@PIN_ID_SISTEMA,
						@PIN_ID_EMPRESA,
						@PIN_ID_MODULO,
						@PIN_ID_VERSION,
						@PIN_ID_LICENCIA,
						@PIN_FE_INICIO,
						@PIN_FE_FIN,
						@PIN_NO_VOLUMEN,
						@PIN_CL_USUARIO,
						@PIN_NB_PROGRAMA,
						@CFE_SISTEMA )			
		END ELSE BEGIN
			UPDATE Lic.K_GESTION_PERIODO SET
						ID_CLIENTE=@PIN_ID_CLIENTE,
						ID_SISTEMA=@PIN_ID_SISTEMA,
						ID_EMPRESA=@PIN_ID_EMPRESA,
						ID_MODULO=@PIN_ID_MODULO,
						ID_VERSION=@PIN_ID_VERSION,
						ID_LICENCIA=@PIN_ID_LICENCIA,
						FE_INICIO=@PIN_FE_INICIO,
						FE_FIN=@PIN_FE_FIN,
						NO_VOLUMEN=@PIN_NO_VOLUMEN,
						CL_USUARIO_APP_MODIFICA=@PIN_CL_USUARIO,
						NB_PROGRAMA_MODIFICA=@PIN_NB_PROGRAMA,
						FE_MODIFICACION=@CFE_SISTEMA
			       
			WHERE ID_GESTION_PERIODO = @PIN_ID_GESTION_PERIODO
									
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

			
	END CATCH
END
GO
PRINT N'Creando [Lic].[SPE_ELIMINA_K_GESTION_PERIODO]...';


GO
-- =============================================
-- Proyecto: AcruxLicenciamiento
-- Copyright (c) - Acrux - 2017
-- Author: Levy Urbieta
-- CRETAE date: 26/12/2017
-- Description: Elimina un registro de K_GESTION_PERIODO
-- =============================================
CREATE PROCEDURE [Lic].[SPE_ELIMINA_K_GESTION_PERIODO]
	@XML_RESULTADO XML OUT,       --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	@PIN_ID_GESTION_PERIODO AS UNIQUEIDENTIFIER

	AS   
BEGIN
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
	BEGIN TRY		   			
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		DELETE FROM Lic.K_GESTION_PERIODO
		WHERE [ID_GESTION_PERIODO] = @PIN_ID_GESTION_PERIODO
				

		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT				
	END TRY
	BEGIN CATCH			
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
							SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(ERROR_NUMBER(), ERROR_MESSAGE())

	END CATCH	
END
GO
PRINT N'Creando [Lic].[SPE_OBTIENE_CLIENTE_CATALOGOS]...';


GO
-- =============================================
-- Proyecto: Nomina
-- Copyright (c) - Acrux - 2017
-- Author: Juan De Dios Pérez
-- CREATE date: 13/03/2017
-- Description: obtener un servicio social especifico
-- =============================================

CREATE PROCEDURE [Lic].[SPE_OBTIENE_CLIENTE_CATALOGOS] 
	    @PIN_ID_CLIENTE AS UNIQUEIDENTIFIER = NULL


AS   
	BEGIN
	DECLARE 
		@V_ID_CLIENTE as uniqueidentifier=NULL,
		@V_CL_CLIENTE nvarchar (10) =  NULL,
		@V_CL_PASSWORD nvarchar (100) =  NULL,
		@V_NB_CLIENTE nvarchar (200) = NULL,
		@V_NB_CONTACTO nvarchar (200) =NULL ,
		@V_CL_EMAIL nvarchar(100)=NULL,
		@V_NB_EJECUTIVO_CUENTA nvarchar(200) = NULL,
		@V_XML_TELEFONOS as xml, 
		@V_XML_CLIENTE_EMPRESAS as xml, 
		@V_XML_CATALOGOS as xml, 
		@V_XML_EMPRESAS as xml 

		SET @V_XML_EMPRESAS = (
SELECT 
	ID_EMPRESA AS "@ID_EMPRESA",
	CL_EMPRESA AS "@CL_EMPRESA",
	NB_EMPRESA AS "@NB_EMPRESA" 
	FROM ADM.C_EMPRESA KP
		ORDER BY KP.NB_EMPRESA
		FOR XML PATH ('EMPRESA'), ROOT ('EMPRESAS')
	)


SET @V_XML_CLIENTE_EMPRESAS = (
	SELECT 
	EC.ID_EMPRESA_CLIENTE AS "@ID_EMPRESA_CLIENTE",
	EC.ID_CLIENTE AS "@ID_CLIENTE",
	EC.ID_EMPRESA AS "@ID_EMPRESA",
	EM.CL_EMPRESA AS "@CL_EMPRESA",
	EM.NB_EMPRESA AS "@NB_EMPRESA" 
	FROM Lic.K_EMPRESA_CLIENTE AS EC
	INNER JOIN ADM.C_EMPRESA EM ON EC.ID_EMPRESA=EM.ID_EMPRESA
	WHERE EC.ID_CLIENTE = @PIN_ID_CLIENTE 
		ORDER BY EM.NB_EMPRESA
		FOR XML PATH ('CLIENTE_EMPRESA'), ROOT ('CLIENTE_EMPRESAS')
	)


	

	       SET @V_XML_CATALOGOS = (
		SELECT 
			@V_XML_EMPRESAS,
			@V_XML_CLIENTE_EMPRESAS
		FOR XML PATH ('CATALOGOS')
	)

SELECT 
		   @V_ID_CLIENTE =ID_CLIENTE,
		   @V_CL_PASSWORD= CL_PASSWORD,
		   @V_CL_CLIENTE= CL_CLIENTE,
		   @V_NB_CLIENTE=NB_CLIENTE,
		   @V_NB_CONTACTO=NB_CONTACTO,
		   @V_CL_EMAIL=CL_EMAIL,
		   @V_XML_TELEFONOS=XML_TELEFONOS,
		   @V_NB_EJECUTIVO_CUENTA=NB_EJECUTIVO_CUENTA
		   FROM ADM.C_CLIENTE
		   WHERE ID_CLIENTE=@PIN_ID_CLIENTE



		SELECT  	  
	    @V_ID_CLIENTE AS ID_CLIENTE,
		   @V_CL_CLIENTE AS CL_CLIENTE,
		   @V_CL_PASSWORD AS CL_PASSWORD,
		   @V_NB_CLIENTE AS NB_CLIENTE,
		   @V_NB_CONTACTO AS NB_CONTACTO,
		   @V_CL_EMAIL AS CL_EMAIL,
		   @V_XML_TELEFONOS AS XML_TELEFONOS,
		   @V_NB_EJECUTIVO_CUENTA AS NB_EJECUTIVO_CUENTA,
		   @V_XML_CATALOGOS  AS CATALOGOS
END
GO
PRINT N'Comprobando los datos existentes con las restricciones recién creadas';


GO
ALTER TABLE [ADM].[C_MODULO] WITH CHECK CHECK CONSTRAINT [FK_C_MODULO_C_SISTEMA];

ALTER TABLE [ADM].[C_VERSION] WITH CHECK CHECK CONSTRAINT [FK_C_VERSION_C_MODULO];

ALTER TABLE [ADM].[C_ROL_FUNCION] WITH CHECK CHECK CONSTRAINT [FK_C_ROL_FUNCION_C_ROL];

ALTER TABLE [ADM].[C_ROL_FUNCION] WITH CHECK CHECK CONSTRAINT [FK_C_ROL_FUNCION_S_FUNCION];

ALTER TABLE [ADM].[C_CATALOGO_LISTA] WITH CHECK CHECK CONSTRAINT [FK_C_CATALOGO_LISTA_S_CATALOGO_TIPO];

ALTER TABLE [ADM].[C_CATALOGO_VALOR] WITH CHECK CHECK CONSTRAINT [FK_C_CATALOGO_VALOR_C_CATALOGO_LISTA];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_CLIENTE];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_EMPRESA];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_LICENCIA];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_MODULO];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_SISTEMA];

ALTER TABLE [Lic].[K_GESTION_PERIODO] WITH CHECK CHECK CONSTRAINT [FK_K_GESTION_PERIODO_C_VERSION];

ALTER TABLE [Lic].[K_EMPRESA_CLIENTE] WITH CHECK CHECK CONSTRAINT [FK_K_EMPRESA_CLIENTE_C_CLIENTE];

ALTER TABLE [Lic].[K_EMPRESA_CLIENTE] WITH CHECK CHECK CONSTRAINT [FK_K_EMPRESA_CLIENTE_C_EMPRESA];


GO
PRINT N'Actualización completada.';


GO
